######################################################################
# File: home-assistant.yaml                                          #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2022-11-28                                                   #
#                                                                    #
# Info: this file contains automations that are associated to the    #
# Home Assistant system.                                             #
#                                                                    #
# Copyright (c) 2022 Sen Morgan                                      #
######################################################################

###############################################
## SETTINGS AND VARIABLES
###############################################
homeassistant:
  customize:
    package.node_anchors:
      sys_notify_title_info: &sys_notify_title_info "💬 Системное уведомление"
      sys_notify_title_warning: &sys_notify_title_warning "⚠️ Предупреждение"
      sys_notify_title_critical: &sys_notify_title_critical "🚨 Внимание!"

###############################################
## INPUT BUTTONS
###############################################
input_button:
  home_assistant_power_off:
    name: Home Assistant Power Off
    icon: mdi:power
  home_assistant_reboot:
    name: Home Assistant Reboot
    icon: mdi:restart

###############################################
## SCRIPTS
###############################################
script:
  home_assistant_shutdown:
    alias: Home Assistant Shutdown
    mode: single
    sequence:
      - action: hassio.host_shutdown

  home_assistant_reboot:
    alias: Home Assistant Reboot
    mode: single
    sequence:
      - action: hassio.host_reboot

###############################################
## AUTOMATIONS
###############################################
automation:
  ###############################################
  ## Notifications
  ###############################################

  - id: "home_assistant_start_notification"
    alias: Home Assistant Start Notification
    triggers:
      - trigger: homeassistant
        event: start
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: Home Assistant запущен в {{ states('sensor.time') }}

  - id: "home_assistant_shutdown_notification"
    alias: Home Assistant Shutdown Notification
    triggers:
      - trigger: homeassistant
        event: shutdown
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: Home Assistant начал процесс выключения в {{ states('sensor.time') }}

  - id: "home_assistant_new_device_connected_notification"
    alias: Notification New Device Connected Notification
    mode: queued
    triggers:
      - trigger: event
        event_type: entity_registry_updated
        event_data:
          action: create
    conditions:
      - "{{trigger.event.data.entity_id.startswith('device_tracker')}}"
    actions:
      - variables:
          entity: "{{trigger.event.data.entity_id}}"
          notify_title: 📡 В сети обнаружено новое устройство
          notify_message: |
            Entity: {{entity}}
            Host: {{state_attr(entity,'host_name')}}
            Ip: {{state_attr(entity,'ip')}}
            Mac-address: {{state_attr(entity,'mac')}}
            Full data: {{trigger.event.data}}
      # Notify via mobile app and create persistent notification
      - action: script.notify_and_create_persistent_notification
        data:
          title: "{{ notify_title }}"
          message: "{{ notify_message }}"
      # Write to system log
      - action: system_log.write
        data:
          message: >
            New device registrered: {{ entity }}
          level: warning
          logger: homeassistant.components.device_tracker
      # Notify via Yandex Station
      - action: media_player.play_media
        entity_id: media_player.yandex_station_midi
        data:
          media_content_id: >
            К локальной сети было подключено новое устройство с именем {{ entity }}
          media_content_type: text

  - id: "home_assistant_update_available_notification"
    alias: Home Assistant Update Available Notification
    triggers:
      - trigger: state
        entity_id: update.home_assistant_core_update
        from: "off"
        to: "on"
    actions:
      - action: notify.mobile_app_sm_s901b
        data:
          title: *sys_notify_title_info
          message: Update!🎉 Доступна новая версия {{ states('sensor.home_assistant_versions') }}
          data:
            actions:
              - action: "URI"
                title: "Open Config"
                uri: "/config"

  # Used blueprint from: https://community.home-assistant.io/t/blueprint-notify-when-zigbee-zwave-any-battery-device-has-gone-offline/537631
  - id: "notification_battery_device_gone_offline"
    alias: Notification Battery Device Gone Offline
    mode: single
    variables:
      day: 0
      exclude:
        entity_id: !secret EXCLUDED_BATTERY_DEVICES
      sensors: >-
        {% set result = namespace(sensors=[]) %} {% for state in states.sensor |
        selectattr('attributes.device_class', 'defined') |
        selectattr('attributes.device_class', '==', 'battery') %}
          {% if "unavailable" in state | string  and not state.entity_id in exclude.entity_id %}
            {% set result.sensors = result.sensors + [state.name.replace(" Battery", "")] %}
          {% endif %}
        {% endfor %} {% for state in states.binary_sensor |
        selectattr('attributes.device_class', 'defined') |
        selectattr('attributes.device_class', '==', 'battery') %}
          {% if "unavailable" in state | string and not state.entity_id in exclude.entity_id %}
            {% set result.sensors = result.sensors + [state.name.replace(" Battery", "")] %}
          {% endif %}
        {% endfor %} {{result.sensors|join(', ')}}
      message: "Обнаружены недоступные Zigbee устройства: {{sensors}}"
    triggers:
      - trigger: time
        at: "20:00:00"
    conditions:
      - "{{ sensors != '' and (day | int == 0 or day | int == now().isoweekday()) }}"
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: "{{ message }}"

  ###############################################
  ## Low Battery Notifications
  ###############################################

  - id: "home_assistant_create_group_of_battery_devices"
    alias: Home Assistant Create Group of Battery Devices
    triggers:
      # Trigger on startup
      - trigger: homeassistant
        event: start
      # Trigger every 2 hours by time_pattern
      - trigger: time_pattern
        hours: "/2"
    actions:
      - action: group.set
        data:
          object_id: battery_devices
          entities: >-
            {%-
              for state in states.sensor
                if is_state_attr(state.entity_id, 'device_class', 'battery') and
                (state.entity_id.endswith("_battery") or state.entity_id.endswith("_power"))
            %}
            {{ state.entity_id }}{%- if not loop.last -%}, {%- endif -%}
            {%- endfor %}

  - id: "home_assistant_low_device_battery_notification"
    alias: Home Assistant Low Device Battery Notification
    triggers:
      - trigger: event
        event_type: state_changed
    conditions:
      # Notify only from 18 till 21 by workdays and from 10 till 21 by weekends
      - or:
          - condition: time
            after: "18:00:00"
            before: "21:00:00"
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: time
            after: "10:00:00"
            before: "21:00:00"
            weekday:
              - sat
              - sun
      # Notify only if the device is in the group
      - condition: template
        value_template: >-
          {{ trigger.event.data.entity_id in (expand('group.battery_devices') | map(attribute='entity_id')) }}
      # Notify only if the device is not unavailable
      - condition: template
        value_template: >-
          {{ not trigger.event.data.new_state.state in ['unknown', 'unavailable'] }}
      # Notify only if the battery level is less than 20%
      - condition: template
        value_template: >-
          {{ (trigger.event.data.new_state.state | int(0)) < 20 }}
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: |
            Устройство {{ trigger.event.data.new_state.attributes.friendly_name }}
            имеет низкий уровень заряда батареи: {{ trigger.event.data.new_state.state }}%

  ###############################################
  ## Other Automations
  ###############################################

  - id: home_assistant_power_off
    alias: Home Assistant - Power Off
    triggers:
      - trigger: state
        entity_id: input_button.home_assistant_power_off
    actions:
      - action: script.turn_on
        entity_id: script.home_assistant_shutdown

  - alias: Home Assistant - Reboot
    id: home_assistant_reboot
    triggers:
      - trigger: state
        entity_id: input_button.home_assistant_reboot
    actions:
      - action: script.turn_on
        entity_id: script.home_assistant_reboot

  - alias: Home Assistant Server Rack - Power Off
    id: home_assistant_server_rack_power_off
    mode: restart
    triggers:
      - trigger: state
        entity_id: input_button.server_rack_power_off
    actions:
      # Check Synology Shutdown button state:
      - if:
          - condition: state
            entity_id: button.synology_ds220_shutdown
            state: "unavailable"
        # If Synology is unavailable, ask for the confirmation
        then:
          - variables:
              # Including an id in the action allows us to identify this script run
              # and not accidentally trigger for other notification actions
              action_power_off: "{{ 'action_power_off' ~ context.id }}"
              action_cancel: "{{ 'action_cancel' ~ context.id }}"
          - action: notify.mobile_app_sm_s901b
            data:
              title: *sys_notify_title_critical
              message: Synology DS220+ недоступен, продолжить выключение Home Assistant?
              data:
                actions:
                  - action: "{{ action_power_off }}"
                    title: "Да"
                  - action: "{{ action_cancel }}"
                    title: "Отмена"
          # Waiting for «action_power_off» or «action_cancel» avoids accidentally continuing
          # for another script/automation's notification action
          - wait_for_trigger:
              - trigger: event
                event_type: mobile_app_notification_action
                event_data:
                  action: "{{ action_power_off }}"
              - trigger: event
                event_type: mobile_app_notification_action
                event_data:
                  action: "{{ action_cancel }}"
          # Perform the action
          - choose:
              - conditions: "{{ wait.trigger.event.data.action == action_power_off }}"
                sequence:
                  # Turn OFF Home Assistant
                  - action: script.turn_on
                    entity_id: script.home_assistant_shutdown
              - conditions: "{{ wait.trigger.event.data.action == action_cancel }}"
                sequence:
                  - action: script.notify_and_create_persistent_notification
                    data:
                      title: *sys_notify_title_info
                      message: Отмена выключения серверного шкафа
        else:
          - action: script.notify_and_create_persistent_notification
            data:
              title: *sys_notify_title_warning
              message: Выключение серверного шкафа началось в {{ states('sensor.time') }}
          # Turn OFF the Synology DS220+
          - action: button.press
            entity_id: button.synology_ds220_shutdown
          - delay: 00:00:10
          # Turn OFF Home Assistant
          - action: script.turn_on
            entity_id: script.home_assistant_shutdown
