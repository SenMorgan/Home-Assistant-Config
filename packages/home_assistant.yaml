######################################################################
# File: home-assistant.yaml                                          #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2022-11-28                                                   #
#                                                                    #
# Info: this file contains automations that are associated to the    #
# Home Assistant system.                                             #
#                                                                    #
# Copyright (c) 2022 Sen Morgan                                      #
######################################################################

###############################################
## SETTINGS AND VARIABLES
###############################################
homeassistant:
  customize:
    package.node_anchors:
      sys_notify_title_info: &sys_notify_title_info "💬 Системное уведомление"
      sys_notify_title_warning: &sys_notify_title_warning "⚠️ Предупреждение"
      sys_notify_title_critical: &sys_notify_title_critical "🚨 Внимание!"

###############################################
## INPUT BUTTONS
###############################################
input_button:
  home_assistant_power_off:
    name: Home Assistant Power Off
    icon: mdi:power
  home_assistant_reboot:
    name: Home Assistant Reboot
    icon: mdi:restart
  server_rack_power_off:
    name: Server Rack Power Off
    icon: mdi:power

###############################################
## SCRIPTS
###############################################
script:
  home_assistant_shutdown:
    alias: Home Assistant Shutdown
    mode: single
    sequence:
      - action: hassio.host_shutdown

  home_assistant_reboot:
    alias: Home Assistant Reboot
    mode: single
    sequence:
      - action: hassio.host_reboot

###############################################
## BINARY SENSORS
###############################################
binary_sensor:
  - platform: template
    sensors:
      any_battery_device_low:
        friendly_name: "Any Battery Device Low"
        value_template: >-
          {{ expand('group.low_battery_devices') | list | count > 0 }}

  - platform: template
    sensors:
      ha_cpu_overheat:
        friendly_name: "HA CPU Overheat"
        value_template: "{{ states('sensor.processor_temperature') | float > 60 }}"

###############################################
## ALERTS
###############################################
alert:
  any_battery_device_low:
    name: "Any Battery Device Low"
    entity_id: binary_sensor.any_battery_device_low
    state: "on"
    repeat: 180
    notifiers:
      - mobile_app_sm_s901b
      - persistent_notification
    title: *sys_notify_title_warning
    message: >-
      {% set devices = expand('group.low_battery_devices') | list %}
      {% set dev_names = devices | sort(attribute='name') | map(attribute='name') | join(', ') %}
      Устройств{{ iif(devices | length > 1, 'а', 'о') }} с низким зарядом батареи: {{ dev_names }}

  home_assistant_cpu_temp_high:
    name: "Home Assistant CPU Temperature High"
    entity_id: binary_sensor.ha_cpu_overheat
    state: "on"
    repeat: 60
    notifiers:
      - mobile_app_sm_s901b
      - persistent_notification
    title: *sys_notify_title_critical
    message: >-
      Внимание! Температура CPU Home Assistant превышает пороговое значение: {{ states('sensor.processor_temperature') }}°C

###############################################
## AUTOMATIONS
###############################################
automation:
  ###############################################
  ## Notifications
  ###############################################

  - id: "home_assistant_start_notification"
    alias: Home Assistant Start Notification
    triggers:
      - trigger: homeassistant
        event: start
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: Home Assistant запущен в {{ states('sensor.time') }}

  - id: "home_assistant_shutdown_notification"
    alias: Home Assistant Shutdown Notification
    triggers:
      - trigger: homeassistant
        event: shutdown
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: Home Assistant начал процесс выключения в {{ states('sensor.time') }}

  - id: "home_assistant_new_device_connected_notification"
    alias: Notification New Device Connected Notification
    mode: queued
    triggers:
      - trigger: event
        event_type: entity_registry_updated
        event_data:
          action: create
    conditions:
      - "{{trigger.event.data.entity_id.startswith('device_tracker')}}"
    actions:
      - variables:
          entity: "{{trigger.event.data.entity_id}}"
          notify_title: 📡 В сети обнаружено новое устройство
          notify_message: |
            Entity: {{entity}}
            Host: {{state_attr(entity,'host_name')}}
            Ip: {{state_attr(entity,'ip')}}
            Mac-address: {{state_attr(entity,'mac')}}
            Full data: {{trigger.event.data}}
      # Notify via mobile app and create persistent notification
      - action: script.notify_and_create_persistent_notification
        data:
          title: "{{ notify_title }}"
          message: "{{ notify_message }}"
      # Write to system log
      - action: system_log.write
        data:
          message: >
            New device registrered: {{ entity }}
          level: warning
          logger: homeassistant.components.device_tracker
      # Notify via Yandex Station
      - action: media_player.play_media
        entity_id: media_player.yandex_station_midi
        data:
          media_content_id: >
            К локальной сети было подключено новое устройство с именем {{ entity }}
          media_content_type: text

  - id: "home_assistant_update_available_notification"
    alias: Home Assistant Update Available Notification
    triggers:
      - trigger: state
        entity_id: update.home_assistant_core_update
        from: "off"
        to: "on"
    actions:
      - action: notify.mobile_app_sm_s901b
        data:
          title: *sys_notify_title_info
          message: Update!🎉 Доступна новая версия {{ states('sensor.home_assistant_versions') }}
          data:
            actions:
              - action: "URI"
                title: "Open Config"
                uri: "/config"

  # Used blueprint from: https://community.home-assistant.io/t/blueprint-notify-when-zigbee-zwave-any-battery-device-has-gone-offline/537631
  - id: "notification_battery_device_gone_offline"
    alias: Notification Battery Device Gone Offline
    mode: single
    variables:
      day: 0
      excluded_entities: !secret EXCLUDED_BATTERY_DEVICES
      sensors: >-
        {% set result = namespace(sensors=[]) %} {% for state in states.sensor |
        selectattr('attributes.device_class', 'defined') |
        selectattr('attributes.device_class', '==', 'battery') %}
          {% if "unavailable" in state | string and not state.entity_id in excluded_entities %}
            {% set result.sensors = result.sensors + [state.name.replace(" Battery", "")] %}
          {% endif %}
        {% endfor %} {% for state in states.binary_sensor |
        selectattr('attributes.device_class', 'defined') |
        selectattr('attributes.device_class', '==', 'battery') %}
          {% if "unavailable" in state | string and not state.entity_id in excluded_entities %}
            {% set result.sensors = result.sensors + [state.name.replace(" Battery", "")] %}
          {% endif %}
        {% endfor %} {{result.sensors|join(', ')}}
      message: "Обнаружены недоступные устройства: {{sensors}}"
    triggers:
      - trigger: time
        at: "20:00:00"
    conditions:
      - "{{ sensors != '' and (day | int(0) == 0 or day | int(0) == now().isoweekday()) }}"
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: "{{ message }}"

  - id: "notification_on_failed_login"
    alias: Notification on Failed Login
    mode: queued
    max: 5
    trigger:
      - platform: persistent_notification
        update_type: added
    condition:
      - condition: template
        value_template: "{{ trigger.notification.notification_id == 'http-login' }}"
    action:
      - variables:
          source_ip: >
            {% set message = trigger.notification.message %}
            {% if 'invalid authentication' in message or 'login attempt' in message %}
              {{ message.split('(')[1].split(')')[0] }}
            {% else %}
              None
            {% endif %}
      - action: notify.mobile_app_sm_s901b
        data:
          title: "⚠️ HA: {{ trigger.notification.title }}"
          message: "{{trigger.notification.message}} Time: {{ now().strftime('%d %b, %X') }}"
          data:
            actions:
              - action: "URI"
                title: >
                  {% if source_ip != None %}
                  Track IP
                  {% else %}
                  Open Home Assistant
                  {% endif %}
                uri: >
                  {% if source_ip != None %}
                  http://www.ip-tracker.org/locator/ip-lookup.php?ip={{source_ip}}
                  {% else %}
                  /config/logs
                  {% endif %}

  ###############################################
  ## Low Battery Notifications
  ###############################################

  - id: "home_assistant_monitor_battery_devices"
    alias: Home Assistant Monitor Battery Devices
    triggers:
      # Trigger on startup
      - trigger: homeassistant
        event: start
      # Trigger every 10 minutes
      - trigger: time_pattern
        minutes: "/10"
    actions:
      - variables:
          excluded_entities: !secret EXCLUDED_BATTERY_DEVICES
      # Create a group of battery devices for UI
      - action: group.set
        data:
          object_id: battery_devices
          entities: >-
            {% for state in states.sensor
              if is_state_attr(state.entity_id, 'device_class', 'battery') and
              state.entity_id not in excluded_entities %}
              {{ state.entity_id }}{%- if not loop.last -%}, {%- endif -%}
            {%- endfor %}
      # Create a group of low battery devices for notifications
      - action: group.set
        data:
          object_id: low_battery_devices
          entities: >-
            {% set threshold = 20 %}
            {% set devices = expand('group.battery_devices') | selectattr('state', 'is_number') | list %}
            {% set low = devices | map(attribute='state') | map('int') | select('<=', threshold) | map('string') | list %}
            {% set low_devices = devices | selectattr('state', 'in', low) | sort(attribute='entity_id') | map(attribute='entity_id') | list %}
            {% if low_devices | length > 0 %}
              {{ low_devices | join(', ') }}
            {% else %}
              []
            {% endif %}

  # Alert if any temperature sensor has not updated its state for 3 hours
  - id: "notification_temperature_sensor_unchanged"
    alias: Notification Temperature Sensor Unchanged
    mode: queued
    max: 10
    max_exceeded: silent
    variables:
      sensor_name: "{{ trigger.to_state.attributes.friendly_name }}"
      sensor_state: "{{ trigger.to_state.state }}"
      sensor_last_changed: "{{ as_timestamp(trigger.to_state.last_changed, 0) | timestamp_custom('%d.%m.%Y %H:%M:%S',1) }}"
    triggers:
      - trigger: state
        entity_id: sensor.ble_temperature_atc_bathroom
        for: "03:00:00"
      - trigger: state
        entity_id: sensor.ble_temperature_atc_bedroom
        for: "03:00:00"
      - trigger: state
        entity_id: sensor.ble_temperature_atc_hall
        for: "03:00:00"
      - trigger: state
        entity_id: sensor.ble_temperature_atc_living_room
        for: "03:00:00"
      - trigger: state
        entity_id: sensor.ble_temperature_atc_toilet
        for: "03:00:00"
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: >-
            Датчик "{{ sensor_name }}" не обновлялся с {{ sensor_last_changed }}.
            Текущее состояние: {{ sensor_state }}

  ###############################################
  ## Other Automations
  ###############################################

  - id: home_assistant_power_off
    alias: Home Assistant - Power Off
    triggers:
      - trigger: state
        entity_id: input_button.home_assistant_power_off
    actions:
      - action: script.turn_on
        entity_id: script.home_assistant_shutdown

  - alias: Home Assistant - Reboot
    id: home_assistant_reboot
    triggers:
      - trigger: state
        entity_id: input_button.home_assistant_reboot
    actions:
      - action: script.turn_on
        entity_id: script.home_assistant_reboot

  - alias: Home Assistant Server Rack - Power Off
    id: home_assistant_server_rack_power_off
    mode: restart
    triggers:
      - trigger: state
        entity_id: input_button.server_rack_power_off
    actions:
      # Check Synology Shutdown button state:
      - if:
          - condition: state
            entity_id: button.synology_ds220_shutdown
            state: "unavailable"
        # If Synology is unavailable, ask for the confirmation
        then:
          - variables:
              # Including an id in the action allows us to identify this script run
              # and not accidentally trigger for other notification actions
              action_power_off: "{{ 'action_power_off' ~ context.id }}"
              action_cancel: "{{ 'action_cancel' ~ context.id }}"
          - action: notify.mobile_app_sm_s901b
            data:
              message: TTS
              data:
                priority: high
                channel: alarm_stream_max
                media_stream: "alarm_stream_max"
                tts_text: Synology DS220+ недоступен, продолжить выключение Home Assistant?
          - action: notify.mobile_app_sm_s901b
            data:
              title: *sys_notify_title_critical
              message: Synology DS220+ недоступен, продолжить выключение Home Assistant?
              data:
                actions:
                  - action: "{{ action_power_off }}"
                    title: "Да"
                  - action: "{{ action_cancel }}"
                    title: "Отмена"
          # Waiting for «action_power_off» or «action_cancel» avoids accidentally continuing
          # for another script/automation's notification action
          - wait_for_trigger:
              - trigger: event
                event_type: mobile_app_notification_action
                event_data:
                  action: "{{ action_power_off }}"
              - trigger: event
                event_type: mobile_app_notification_action
                event_data:
                  action: "{{ action_cancel }}"
          # Perform the action
          - choose:
              - conditions: "{{ wait.trigger.event.data.action == action_power_off }}"
                sequence:
                  # Turn OFF Home Assistant
                  - action: script.turn_on
                    entity_id: script.home_assistant_shutdown
              - conditions: "{{ wait.trigger.event.data.action == action_cancel }}"
                sequence:
                  - action: script.notify_and_create_persistent_notification
                    data:
                      title: *sys_notify_title_info
                      message: Отмена выключения серверного шкафа
        else:
          - action: script.notify_and_create_persistent_notification
            data:
              title: *sys_notify_title_warning
              message: Выключение серверного шкафа началось в {{ states('sensor.time') }}
          # Turn OFF the Synology DS220+
          - action: button.press
            entity_id: button.synology_ds220_shutdown
          - delay: 00:00:10
          # Turn OFF Home Assistant
          - action: script.turn_on
            entity_id: script.home_assistant_shutdown
