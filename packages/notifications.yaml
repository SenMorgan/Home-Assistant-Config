######################################################################
# File: notifications.yaml                                           #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2024-05-05                                                   #
#                                                                    #
# Copyright (c) 2024 Sen Morgan                                      #
######################################################################

###############################################
## SETTINGS AND VARIABLES
###############################################
homeassistant:
  customize:
    package.node_anchors:
      sys_notify_title_info: &sys_notify_title_info "üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
      sys_notify_title_warning: &sys_notify_title_warning "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
      sys_notify_title_critical: &sys_notify_title_critical "üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"

###############################################
## SCRIPTS
###############################################
script:
  notify_and_create_persistent_notification:
    alias: Notify and Create Persistent Notification
    sequence:
      - service: notify.mobile_app_sm_s901b
        data:
          title: "{{ title }}"
          message: "{{ message }}"
      - service: persistent_notification.create
        data:
          title: "{{ title }}"
          message: "{{ message }}"

###############################################
## AUTOMATIONS
###############################################
automation:
  - id: "notification_kris_srrived"
    alias: Notification Kris Arrived
    trigger:
      - platform: state
        entity_id: person.kris
        to: "home"
    action:
      - service: notify.mobile_app_sm_s901b
        data:
          title: "{{ 'üë©‚Äçü¶∞' }} –°–µ–º–µ–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
          message: –ö—Ä–∏—Å—Ç–∏–Ω–∞ –ø—Ä–∏—à–ª–∞ –¥–æ–º–æ–π –≤ {{ states('sensor.time') }}
      - if:
          - condition: template
            value_template: "{{ is_state('person.sen', 'home') }}"
        then:
          - service: script.turn_on
            entity_id: script.notify_via_kitchen_spotlights
          - if:
              - condition: state
                entity_id: switch.asus_pc
                state: "on"
            then:
              - service: select.select_option
                target:
                  entity_id: select.pc_backlight_preset
                data:
                  option: "Alarm"
              - delay: 00:00:10
              - service: select.select_option
                target:
                  entity_id: select.pc_backlight_preset
                data:
                  option: "Gender"

  - id: "notification_kris_leaved"
    alias: Notification Kris Leaved
    trigger:
      - platform: state
        entity_id: person.kris
        from: "home"
        to: "not_home"
    action:
      - service: notify.mobile_app_sm_s901b
        data:
          title: "{{ 'üë©‚Äçü¶∞' }} –°–µ–º–µ–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
          message: –ö—Ä–∏—Å—Ç–∏–Ω–∞ —É—à–ª–∞ –≤ {{ states('sensor.time') }}

  - id: "notification_kris_is_near_me"
    alias: Notification Kris Is Near Me
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.distance_between_kris_and_sen
        below: 200
    condition:
      - condition: template
        value_template: "{{ not states('person.kris') == 'home' }}"
        # Check if last notification was fired more than 30 minutes ago
      - condition: template
        value_template: >
          {{ now() - state_attr('automation.notification_kris_is_near_me', 'last_triggered') > timedelta(minutes=5) }}
    action:
      - service: notify.mobile_app_sm_s901b
        data:
          title: "{{ 'üë©‚Äçü¶∞' }} –°–µ–º–µ–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
          message: –ö—Ä–∏—Å—Ç–∏–Ω–∞ –≤ {{ states('sensor.distance_between_kris_and_sen') }} –º–µ—Ç—Ä–∞—Ö –æ—Ç –í–∞—Å –≤ {{ states('sensor.time') }}

  - id: "notification_snow"
    alias: Notification Snow
    trigger:
      - platform: numeric_state
        entity_id: sensor.openweathermap_snow
        above: 0
    action:
      - service: notify.mobile_app_sm_s901b
        data_template:
          title: ‚ùÑÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–µ–≥–µ
          message: –î–æ–ª–∂–Ω–æ –≤—ã–ø–∞–¥–∞—Ç—å {{ states('sensor.openweathermap_snow') }} –º–º/—á —Å–Ω–µ–≥–∞!

  - id: "notification_door_opened"
    alias: Notification Door Opened
    trigger:
      - platform: state
        entity_id: binary_sensor.hall_door_contact
        to: "on"
    condition:
      - condition: template
        value_template: >
          {{ not states('person.sen') == 'home'}}
    action:
      - service: notify.mobile_app_sm_s901b
        data:
          title: *sys_notify_title_info
          message: –í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ {{ states('sensor.time') }}

  - id: "notification_gas_leakage_detected"
    alias: Notification Gas Leakage Detected
    trigger:
      - platform: state
        entity_id: binary_sensor.co_and_natural_gas_alarm_gas
        to: "on"
    action:
      - repeat:
          while:
            - condition: state
              entity_id: binary_sensor.co_and_natural_gas_alarm_gas
              state: "on"
          sequence:
            - service: notify.mobile_app_sm_s901b
              data:
                title: *sys_notify_title_critical
                message: >
                  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–µ—á–∫–∞ –≥–∞–∑–∞ –≤ {{ states('sensor.time') }}
                  –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≥–∞–∑–∞: {{ states('sensor.co_and_natural_gas_alarm_gas') }} ppm
                data:
                  ttl: 0
                  priority: urgent
                  channel: alarm_stream
                  importance: high
                  persistent: true
                  tag: "persistent"
            - delay: 00:00:10

  - id: "notification_carbon_monoxide_detected"
    alias: Notification Carbon Monoxide Detected
    trigger:
      - platform: state
        entity_id: binary_sensor.co_and_natural_gas_alarm_carbon_monoxide
        to: "on"
    action:
      - repeat:
          while:
            - condition: state
              entity_id: binary_sensor.co_and_natural_gas_alarm_carbon_monoxide
              state: "on"
          sequence:
            - service: notify.mobile_app_sm_s901b
              data:
                title: *sys_notify_title_critical
                message: >
                  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —É–≥–∞—Ä–Ω–æ–≥–æ –≥–∞–∑–∞ –≤ {{ states('sensor.time') }}
                  –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≥–∞–∑–∞: {{ states('sensor.co_and_natural_gas_alarm_carbon_monoxide') }} ppm
            - delay: 00:00:10

  - id: "notification_ads_b_receiver_disconnected"
    alias: Notification ADS-B Receiver Disconnected
    trigger:
      - platform: state
        entity_id: binary_sensor.fr24_feeder_receiver_connected
        from: "on"
        to: "off"
        for: "00:05:00"
    action:
      - variables:
          timestamp: "{{ trigger.to_state.last_changed.astimezone(now().tzinfo).strftime('%H:%M:%S') }}"
      - service: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: –°–≤—è–∑—å —Å ADS-B –ø—Ä–∏—ë–º–Ω–∏–∫–æ–º –±—ã–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞ –≤ {{ timestamp }}
      - service: automation.turn_on
        entity_id: automation.notification_ads_b_receiver_connection_restored

  - id: "notification_ads_b_receiver_connection_restored"
    alias: Notification ADS-B Receiver Connection Restored
    trigger:
      - platform: state
        entity_id: binary_sensor.fr24_feeder_receiver_connected
        from: "off"
        to: "on"
        for: "00:01:00"
    action:
      - variables:
          timestamp: "{{ trigger.to_state.last_changed.astimezone(now().tzinfo).strftime('%H:%M:%S') }}"
      - service: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: –°–≤—è–∑—å —Å ADS-B –ø—Ä–∏—ë–º–Ω–∏–∫–æ–º –±—ã–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {{ timestamp }}
      - service: automation.turn_off
        entity_id: automation.notification_ads_b_receiver_connection_restored

  - id: "notification_diesel_price_changed"
    alias: Notification Diesel Price Changed
    trigger:
      - platform: state
        entity_id: sensor.diesel_price_ono
    condition:
      - condition: template
        value_template: >
          {{ trigger.from_state.state != trigger.to_state.state }}
      - condition: template
        value_template: >
          {{ is_number(trigger.from_state.state) and is_number(trigger.to_state.state) }}
    action:
      - service: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: >
            –¶–µ–Ω–∞ –¥–∏–∑–µ–ª—è {{ '—É–ø–∞–ª–∞' if trigger.from_state.state | float(0) > trigger.to_state.state | float(0) else '–≤–æ–∑—Ä–∞—Å–ª–∞' }}
            —Å {{ trigger.from_state.state }} –¥–æ {{ trigger.to_state.state }} Kƒç/L

  - id: "notification_aircraft_detected"
    alias: Notification Aircraft Detected
    trigger:
      - platform: state
        entity_id: sensor.fr24_aircraft
    condition:
      - condition: template
        value_template: !secret AIRCRAFTS_TO_TRACK_CONDITION_TEMPLATE
        # Do not forget to add this line to secrets.yaml file and replace OK*** with your aircraft registration number:
        # AIRCRAFTS_TO_TRACK_CONDITION_TEMPLATE: {{ state_attr('sensor.fr24_aircraft', 'aircraft') | regex_search('OK***|OK***') }}
      - condition: template
        value_template: >
          {{ now() - state_attr('automation.notification_aircraft_detected', 'last_triggered') > timedelta(minutes=5) }}
    action:
      - service: notify.mobile_app_sm_s901b
        data:
          title: "{{ '‚úàÔ∏è' }} –ü—Ä–æ–ª–µ—Ç–∞–µ—Ç –∑–Ω–∞–∫–æ–º—ã–π —Å–∞–º–æ–ª—ë—Ç"
          message: !secret AIRCRAFTS_TO_TRACK_MESSAGE_TEMPLATE

          # There is no other way to hide aircrafts registration number from code in secrets.yaml and use it in template,
          # so I have to save all code in the secrets.yaml file:
          # AIRCRAFTS_TO_TRACK_MESSAGE_TEMPLATE: |
          # {% set aircraft = namespace(flight='', alt_baro='', gs='') %}
          # {% set aircrafts_list = state_attr('sensor.fr24_aircraft', 'aircraft') %}
          # {% for element in aircrafts_list if element | regex_search('OK***|OK***') %} # DO NOT FORGET TO CHANGE AIRCRAFTS REGISTRATION NUMBER
          #         {% set aircraft.flight = element['flight'] %}
          #         {% set aircraft.alt = (((element['alt_baro'] | float(0)) * 0.3048) | int(0)) | string %}
          #         {% set aircraft.gs = (((element['gs'] | float(0)) * 1.852) | int(0)) | string %}
          # {% endfor %}
          # {% if aircraft.flight == '' %}
          #         {{ '–î–∞–Ω–Ω—ã–µ –æ —Å–∞–º–æ–ª—ë—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã' }}
          # {% else %}
          #         {{ '–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞: ' + aircraft.flight }}
          #         {{ '–í—ã—Å–æ—Ç–∞: ' + aircraft.alt + ' –º' }}
          #         {{ '–°–∫–æ—Ä–æ—Å—Ç—å: ' + aircraft.gs + ' –∫–º/—á' }}
          # {% endif %}

  - id: "notification_solar_panel_power_above_threshold"
    alias: Notification Solar Panel Power Above Threshold
    trigger:
      - platform: numeric_state
        entity_id: sensor.solar_panel_power
        above: 45
    action:
      - service: notify.mobile_app_sm_s901b
        data:
          title: "{{ 'üåû' }} –°–æ–ª–Ω–µ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å"
          message: "–ú–æ—â–Ω–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞: {{ states('sensor.solar_panel_power') }} W"

  - id: "notification_kris_watch_charged"
    alias: Notification Kris Watch Charged
    trigger:
      - platform: state
        entity_id: sensor.galaxy_watch6_fegx_battery_state
        to: "full"
    action:
      - service: notify.mobile_app_sm_g991b
        data:
          title: "{{ 'üîã' }} –ß–∞—Å—ã –∑–∞—Ä—è–∂–µ–Ω—ã"
          message: "–¢–≤–æ–∏ Galaxy Watch –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω—ã"
      # If silent mode is not enabled, then notify via Yandex also
      - if:
          - condition: state
            entity_id: input_boolean.silent_mode
            state: "off"
          - condition: state
            entity_id: binary_sensor.people_home
            state: "on"
        then:
          - service: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_type: text
              media_content_id: "–ß–∞—Å—ã –ö—Ä–∏—Å—Ç–∏–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω—ã"
