######################################################################
# File: dcc_ex.yaml                                                  #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2024-01-21                                                   #
#                                                                    #
# Info: this file contains entities that are associated to the       #
# DCC-EX protocol and my model railway layout.                       #
# More info about DCC-EX API:                                        #
# https://dcc-ex.com/reference/developers/api.html#gsc.tab=0         #
#                                                                    #
# Note: I have created a custom integration for Home Assistant to    #
# control EX-CommandStation via DCC-EX protocol. More info:          #
# https://github.com/SenMorgan/EX-HABridge                           #
#                                                                    #
# Copyright (c) 2024 Sen Morgan                                      #
######################################################################

###############################################
## SHELL COMMANDS
###############################################
shell_command:
  dcc_ex_command: >-
    /config/scripts/dcc_ex_command.sh
    -c '{{ command_type }}'
    -v '{{ command_value }}'
    -a '{{ dcc_ex_server_ip }}'
    -p '{{ dcc_ex_server_port }}'

###############################################
## MEDIA PLAYER - Used for easier control of volume via voice assistants
###############################################
media_player:
  - platform: universal
    name: "Model Railway"
    commands:
      turn_on:
        action: switch.turn_on
        entity_id: switch.ex_commandstation_tracks_power
      turn_off:
        action: switch.turn_off
        entity_id: switch.ex_commandstation_tracks_power
      volume_up:
        action: shell_command.dcc_ex_command
        data:
          command_type: "volume"
          command_value: "64"
          dcc_ex_server_ip: !secret DCC-EX-SERVER-IP
          dcc_ex_server_port: !secret DCC-EX-SERVER-PORT
      volume_down:
        action: shell_command.dcc_ex_command
        data:
          command_type: "volume"
          command_value: "20"
          dcc_ex_server_ip: !secret DCC-EX-SERVER-IP
          dcc_ex_server_port: !secret DCC-EX-SERVER-PORT
      volume_set:
        action: shell_command.dcc_ex_command
        data:
          command_type: "volume"
          command_value: "{{ volume_level }}"
          dcc_ex_server_ip: !secret DCC-EX-SERVER-IP
          dcc_ex_server_port: !secret DCC-EX-SERVER-PORT
      volume_mute:
        action: shell_command.dcc_ex_command
        data:
          command_type: "volume"
          command_value: "0"
          dcc_ex_server_ip: !secret DCC-EX-SERVER-IP
          dcc_ex_server_port: !secret DCC-EX-SERVER-PORT
      media_play:
        action: shell_command.dcc_ex_command
        data:
          command_type: "cmd"
          command_value: "</ RESUME>"
          dcc_ex_server_ip: !secret DCC-EX-SERVER-IP
          dcc_ex_server_port: !secret DCC-EX-SERVER-PORT
      media_pause:
        action: shell_command.dcc_ex_command
        data:
          command_type: "cmd"
          command_value: "</ PAUSE>"
          dcc_ex_server_ip: !secret DCC-EX-SERVER-IP
          dcc_ex_server_port: !secret DCC-EX-SERVER-PORT
    attributes:
      state: switch.ex_commandstation_tracks_power
    device_class: speaker

###############################################
## AUTOMATIONS
###############################################
automation:
  - alias: "DCC-EX Enable Power on Sunset"
    id: dcc_ex_enable_power_on_sunset
    triggers:
      - trigger: numeric_state
        entity_id: sun.sun
        attribute: elevation
        below: 4.0
      - trigger: state
        entity_id: person.sen
        to: "home"
    conditions:
      # For elevation trigger
      - condition: state
        entity_id: person.sen
        state: "home"
      # For person trigger
      - condition: numeric_state
        entity_id: sun.sun
        attribute: elevation
        below: 4.0
      # Only if night mode is off
      - condition: state
        entity_id: input_boolean.home_night_mode
        state: "off"
    actions:
      - action: switch.turn_on
        entity_id:
          - switch.ex_commandstation_tracks_power
          - switch.loco_vossloh_1701_lights
          - switch.loco_sbb_cargo_re_482_coupling

  - alias: "DCC-EX Layout Lights by Motion Sensor"
    id: dcc_ex_layout_lights_by_motion_sensor
    description: "Control train layout lights based on motion sensor"
    mode: restart
    triggers:
      - trigger: state
        entity_id: binary_sensor.kitchen_motion_alarm
    conditions:
      - condition: state
        entity_id: switch.ex_commandstation_tracks_power
        state: "on"
      - condition: template
        value_template: "{{ trigger.to_state.state in ['on', 'off'] }}"
    actions:
      - action: switch.turn_{{ "on" if trigger.to_state.state == "on" else "off" }}
        entity_id:
          - switch.loco_vossloh_1701_cabin_light
          - switch.loco_sbb_cargo_re_482_inspection_lights

###############################################
## INTENT SCRIPTS for Voice Control of Locomotives
###############################################
intent_script:
  SetLocoSpeed:
    description: "Set the speed of a locomotive"
    mode: restart
    platforms:
      - number
    action:
      action: number.set_value
      data:
        entity_id: &loco_speed_entity >
          {{ integration_entities('ex_habridge')
            | select('match', 'number')
            | select('is_state_attr', 'dcc_id', (loco_id | int(-1) ))
            | list | first | default }}
        value: "{{ speed }}"
    speech:
      text: "Set locomotive {{ loco_id | int(0) | string }} speed to {{ speed | round(0) }}%"

  IncreaseLocoSpeed:
    description: "Increase the speed of a locomotive"
    mode: restart
    platforms:
      - number
    action:
      - variables:
          speed_entity: *loco_speed_entity
      - service: number.set_value
        data:
          entity_id: "{{ speed_entity }}"
          value: "{{ [ (states(speed_entity) | int(0)) + 10, 100] | min }}"
    speech:
      text: "Increased locomotive {{ loco_id | int(0) | string }} speed"

  DecreaseLocoSpeed:
    description: "Decrease the speed of a locomotive"
    mode: restart
    platforms:
      - number
    action:
      - variables:
          speed_entity: *loco_speed_entity
      - service: number.set_value
        data:
          entity_id: "{{ speed_entity }}"
          value: "{{ [ (states(speed_entity) | int(0)) - 10, 0] | max }}"
    speech:
      text: "Decreased locomotive {{ loco_id | int(0) | string }} speed"

  SetLocoDirection:
    description: "Set the direction of a locomotive"
    mode: restart
    platforms:
      - select
    action:
      action: select.select_option
      data:
        entity_id: &loco_direction_entity >
          {{ integration_entities('ex_habridge')
            | select('match', 'select')
            | select('is_state_attr', 'dcc_id', (loco_id | int(-1) ))
            | list | first | default }}
        option: "{{ direction }}"
    speech:
      text: "Set locomotive {{ loco_id | int(0) | string }} direction to {{ direction }}"

  ToggleLocoDirection:
    description: "Toggle the direction of a locomotive"
    mode: restart
    platforms:
      - select
    action:
      - variables:
          direction_entity: *loco_direction_entity
      - action: select.select_option
        data:
          entity_id: "{{ direction_entity }}"
          option: "{{ 'reverse' if is_state(direction_entity, 'forward') else 'forward' }}"
    speech:
      text: "Changed locomotive {{ loco_id | int(0) | string }} direction"

  StopLoco:
    description: "Stop a locomotive"
    mode: restart
    platforms:
      - number
    action:
      action: number.set_value
      data:
        entity_id: *loco_speed_entity
        value: 0
    speech:
      text: "Stopped locomotive {{ loco_id | int(0) | string }}"

  EmergencyStopAllLocos:
    description: "Emergency stop all locomotives"
    mode: restart
    platforms:
      - button
    action:
      - action: button.press
        data:
          entity_id: button.ex_commandstation_emergency_stop
    speech:
      text: "Locomotives emergency stop activated"
