######################################################################
# File: heating.yaml                                                 #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2022-11-30                                                   #
#                                                                    #
# Info: this file contains automations and scripts for heating       #
#       control in the apartment.                                    #
#                                                                    #
# Copyright (c) 2022 Sen Morgan                                      #
######################################################################

###############################################
## SETTINGS AND VARIABLES
###############################################
homeassistant:
  customize:
    package.node_anchors:
      sys_notify_title_info: &sys_notify_title_info "💬 Системное уведомление"
      sys_notify_title_warning: &sys_notify_title_warning "⚠️ Предупреждение"
      sys_notify_title_critical: &sys_notify_title_critical "🚨 Внимание!"

      quarantine_duration_min: &quarantine_duration_min "50"
      short_heating_duration_min: &short_heating_duration_min "10"
      pause_heating_duration_min: &pause_heating_duration_min "60"

      default_temperature: &default_temperature "21.0"

###############################################
## SCHEDULERS
###############################################
schedule:
  bathroom_heating_evening:
    name: "Bathroom Heating Evening"
    monday: &bathroom_heating_schedule
      - from: "17:40:00"
        to: "17:45:00"
    tuesday: *bathroom_heating_schedule
    wednesday: *bathroom_heating_schedule
    thursday: *bathroom_heating_schedule
    friday: *bathroom_heating_schedule
    saturday: *bathroom_heating_schedule
    sunday: *bathroom_heating_schedule

###############################################
## INPUT TEXTS
###############################################
input_text:
  heating_log:
    name: Heating Log

###############################################
## INPUT BOOLEANS
###############################################
input_boolean:
  heating_season:
    name: Heating Season
    icon: mdi:snowflake
  heating_allowed:
    # Flag used to block heating manually for some time or by any external automation
    name: Heating Allowed
    icon: mdi:check-circle-outline
    initial: on

###############################################
## TIMERS
###############################################
timer:
  heating_quarantine:
    name: Heating Quarantine
    duration:
      minutes: *quarantine_duration_min
    icon: mdi:radiator-off
    restore: true
  short_heating:
    name: Short Heating
    duration:
      minutes: *short_heating_duration_min
    icon: mdi:timer-sand
    restore: true
  pause_heating:
    name: Pause Heating
    duration:
      minutes: *pause_heating_duration_min
    icon: mdi:check-circle-outline
    restore: true

###############################################
## BINARY SENSORS
###############################################
binary_sensor:
  - platform: template
    sensors:
      thermostat_heating:
        friendly_name: Thermostat is heating
        device_class: heat
        value_template: >
          {{ is_state_attr('climate.family_room', 'hvac_action', "heating") }}
      thermostat_active:
        friendly_name: Thermostat Active
        device_class: running
        value_template: >-
          {{ not is_state_attr('climate.family_room', 'hvac_action', "off") }}
      freeze_alert_at_night:
        friendly_name: Temperature is below 19°C at night
        device_class: cold
        value_template: >
          {{ now().hour >= 0 and now().hour < 6 and
            ((state_attr('climate.family_room', 'current_temperature') | float(0) < 19.0) or
            (states('sensor.ble_temperature_atc_bedroom') | float(0) < 19.0) or
            (states('sensor.ble_temperature_atc_living_room') | float(0) < 19.0)) }}
      heating_request_bedroom:
        friendly_name: Heating Request Bedroom
        device_class: heat
        value_template: >
          {{ state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'current_temperature') | float <
            state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'temperature') | float }}
      heating_request_kitchen:
        friendly_name: Heating Request Kitchen
        device_class: heat
        value_template: >
          {{ state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'current_temperature') | float <
            state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'temperature') | float }}
      heating_request_living_room:
        friendly_name: Heating Request Living Room
        device_class: heat
        value_template: >
          {{ state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'current_temperature') | float <
            state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'temperature') | float }}
      heating_request_bathroom:
        friendly_name: Heating Request Bathroom
        device_class: heat
        value_template: >
          {{ (states('sensor.ble_temperature_atc_bathroom') | float(0) <
            states('input_number.bathroom_heating_target_temperature') | float(24)) and
            is_state('schedule.bathroom_heating_evening', 'on') }}
  - platform: group
    name: ETRVs requesting heat
    device_class: heat
    entities:
      - binary_sensor.danfoss_etrv0100_bedroom_heat_required
      - binary_sensor.danfoss_etrv0103_kitchen_heat_required
      - binary_sensor.danfoss_etrv0103_living_room_heat_required

###############################################
## HISTORY STATS SENSORS
###############################################
sensor:
  - platform: history_stats
    name: Heating Today
    entity_id: binary_sensor.thermostat_heating
    state: "on"
    type: time
    start: "{{ today_at('00:00:00') }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Heating Yesterday
    entity_id: binary_sensor.thermostat_heating
    state: "on"
    type: time
    end: "{{ today_at('00:00:00') }}"
    duration:
      days: 1
  - platform: history_stats
    name: Heating Bedroom Today
    entity_id: binary_sensor.danfoss_etrv0100_bedroom_heat_required
    state: "on"
    type: time
    start: "{{ today_at('00:00:00') }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Heating Bedroom Yesterday
    entity_id: binary_sensor.danfoss_etrv0100_bedroom_heat_required
    state: "on"
    type: time
    end: "{{ today_at('00:00:00') }}"
    duration:
      days: 1
  - platform: history_stats
    name: Heating Kitchen Today
    entity_id: binary_sensor.danfoss_etrv0103_kitchen_heat_required
    state: "on"
    type: time
    start: "{{ today_at('00:00:00') }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Heating Kitchen Yesterday
    entity_id: binary_sensor.danfoss_etrv0103_kitchen_heat_required
    state: "on"
    type: time
    end: "{{ today_at('00:00:00') }}"
    duration:
      days: 1
  - platform: history_stats
    name: Heating Living Room Today
    entity_id: binary_sensor.danfoss_etrv0103_living_room_heat_required
    state: "on"
    type: time
    start: "{{ today_at('00:00:00') }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Heating Living Room Yesterday
    entity_id: binary_sensor.danfoss_etrv0103_living_room_heat_required
    state: "on"
    type: time
    end: "{{ today_at('00:00:00') }}"
    duration:
      days: 1

###############################################
## INPUT BUTTONS
###############################################
input_button:
  # Button to start manual heating for 10 minutes from the UI / voice assistant
  thermostat_10_minutes_heating:
    name: Heat 10 Minutes
    icon: mdi:radiator

###############################################
## INPUT NUMBERS
###############################################
input_number:
  thermostat_default_target_temperature:
    name: Thermostat Default Target Temperature
    min: 18.0
    max: 25.0
  thermostat_new_target_temperature:
    name: Thermostat New Target Temperature
    min: 15.0
    max: 30.0
  etrv_bedroom_default_temperature:
    name: ETRV Bedroom Default Temperature
    step: 0.5
    min: 18.0
    max: 25.0
  etrv_kitchen_default_temperature:
    name: ETRV Kitchen Default Temperature
    step: 0.5
    min: 18.0
    max: 25.0
  etrv_living_room_default_temperature:
    name: ETRV Living Room Default Temperature
    step: 0.5
    min: 18.0
    max: 25.0
  etrv_min_target_temperature:
    name: ETRV Min Target Temperature
    step: 0.5
    min: 17.0
    max: 21.0
  etrv_max_target_temperature:
    name: ETRV Max Target Temperature
    step: 0.5
    min: 21.0
    max: 25.0
  bathroom_heating_target_temperature:
    name: Bathroom Heating Target Temperature
    step: 0.5
    min: 20.0
    max: 25.0

###############################################
## SCRIPTS
###############################################
script:
  thermostat_start_heating:
    alias: Thermostat Start Heating
    # Forces the thermostat to start heating by adding 2°C to the current temperature
    sequence:
      - action: input_number.set_value
        data:
          entity_id: input_number.thermostat_new_target_temperature
          value: "{{ (state_attr('climate.family_room', 'current_temperature') | float(24)) + 2 }}"
      # Set thermostat new target temperature
      - action: script.thermostat_set_temperature
        data:
          temperature: "{{ states('input_number.thermostat_new_target_temperature') | float(24) }}"
      # Log what rooms are requesting heat
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: >-
            {% set room_names = {
              'binary_sensor.danfoss_etrv0100_bedroom_heat_required': 'спальне',
              'binary_sensor.danfoss_etrv0103_kitchen_heat_required': 'кухне',
              'binary_sensor.danfoss_etrv0103_living_room_heat_required': 'гостиной',
              'binary_sensor.heating_request_bathroom': 'ванной'
            } %}
            {% set rooms = namespace(list=[]) %}
            {% for entity_id, room_name in room_names.items() %}
              {% if is_state(entity_id, 'on') %}
                {% set rooms.list = rooms.list + [room_name] %}
              {% endif %}
            {% endfor %}
            ETRVs запрашивают отопление в
            {{ rooms.list[:-1] | join(', ') }}
            {% if rooms.list | length > 1 %}и{% endif %}
            {{ rooms.list[-1] if rooms.list | length > 0 else '' }}

  thermostat_stop_heating:
    alias: Thermostat Stop Heating
    # Stop forced heating by setting default target temperature
    sequence:
      # Log the message if provided
      - if: "{{ message is defined }}"
        then:
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "{{ message }}"
      # Set default thermostat target temperature
      - action: script.thermostat_set_temperature
        data:
          temperature: "{{ states('input_number.thermostat_default_target_temperature') | float(21) }}"

  thermostat_set_temperature:
    alias: Thermostat Set Temperature
    sequence:
      # Check if thermostat is ready to accept new target temperature and enable it if not
      - if:
          - condition: template
            value_template: "{{ state_attr('climate.family_room', 'temperature') == None }}"
        then:
          # Repeat the command to ensure that the thermostat is enabled
          - repeat:
              sequence:
                - action: climate.set_hvac_mode
                  entity_id: climate.family_room
                  data:
                    hvac_mode: "heat"
                - delay: "{{ 5 * repeat.index }}"
              until: "{{ state_attr('climate.family_room', 'temperature') != None or repeat.index > 5 }}"
      # Repeat the command to ensure that the thermostat is set to the default temperature
      - repeat:
          sequence:
            - action: climate.set_temperature
              entity_id: climate.family_room
              data:
                temperature: "{{ temperature }}"
            - delay: "{{ 5 * repeat.index }}"
          until: "{{ state_attr('climate.family_room', 'temperature') == temperature or repeat.index > 5 }}"

  disable_thermostat:
    alias: Disable Thermostat
    sequence:
      # Firstly, reset the thermostat target temperature
      - action: script.thermostat_stop_heating
      # Wait for the script to finish
      - wait_template: "{{ is_state('script.thermostat_stop_heating', 'off') }}"
        timeout: "00:01:00"
      # Log the message if provided
      - if: "{{ message is defined }}"
        then:
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "{{ message }}"
      - alias: "Repeat until thermostat is off"
        repeat:
          sequence:
            - action: climate.set_hvac_mode
              entity_id: climate.family_room
              data:
                hvac_mode: "off"
            - delay: "{{ 5 * repeat.index }}"
          until: "{{ is_state('binary_sensor.thermostat_active', 'off') or repeat.index > 5 }}"

  notify_if_some_window_is_opened_during_heating_season:
    alias: Notify If Some Window Opened During Heating Season
    sequence:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: state
        entity_id: binary_sensor.windows
        state: "on"
      - action: notify.mobile_app_sm_s901b
        data:
          title: *sys_notify_title_warning
          message: >-
            {% set rooms = expand('binary_sensor.windows') | selectattr('state','eq','on') |
              map(attribute='entity_id') | map('area_name') | list %}
            {% if rooms | length == 1 %}
              Открыто окно в комнате: {{ rooms[0] }}
            {% else %}
              Открыты окна в комнатах: {{ rooms | join(', ') }}
            {% endif %}

###############################################
## AUTOMATIONS
###############################################
automation:
  ###############################################
  ## Window Opened Control
  ###############################################
  - alias: Stop Heating by Window Opened
    id: stop_heating_by_window_opened
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.windows
        to: "on"
        for: "00:00:10"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If thermostat is active and heating is not paused
      - condition: state
        entity_id: binary_sensor.thermostat_active
        state: "on"
    action:
      # Stop "Pause Heating" timer if it is active without restoring the thermostat mode
      - action: timer.cancel
        entity_id: timer.pause_heating
      # Stop "Heating Quarantine" timer if it is active and log it
      - if:
          - condition: state
            entity_id: timer.heating_quarantine
            state: "active"
        then:
          - action: timer.cancel
            entity_id: timer.heating_quarantine
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "Открыто окно → карантин перед включением отопления отменён"
      # Stop "Short Heating" timer if it is active and notify about it
      - if:
          - condition: state
            entity_id: timer.short_heating
            state: "active"
        then:
          # Stop "Short Heating" timer without restoring the thermostat mode
          - action: timer.cancel
            entity_id: timer.short_heating
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "Открыто окно → кратковременное отопление отменено"
          - action: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_id: Подогрев квартиры окончен из-за открытого окна
              media_content_type: text
      # Disable heating
      - action: script.disable_thermostat
        data:
          message: "Открыто окно → отопление выключено"

  - alias: Start Quarantine by Window Closed
    id: start_quarantine_by_window_closed
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.windows
        to: "off"
        for: "00:00:10"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
    action:
      # Start "Heating Quarantine" timer
      - action: timer.start
        entity_id: timer.heating_quarantine
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: Окна закрыты → карантин перед включением отопления начат

  - alias: Restore Heating after Quarantine
    id: restore_heating_after_quarantine
    mode: single
    max_exceeded: silent
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.heating_quarantine
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # All windows should be closed
      - condition: state
        entity_id: binary_sensor.windows
        state: "off"
    action:
      # Set thermostat mode to «heat» only if someone is home
      - if:
          # Proceed only if heating is not paused and either people are home or presence is ignored
          - condition: state
            entity_id: timer.pause_heating
            state: "idle"
          - or:
              - condition: state
                entity_id: binary_sensor.people_home
                state: "on"
              - condition: state
                entity_id: input_boolean.ignore_people_presence
                state: "on"
        then:
          # Stop heating by setting default temperature on thermostat
          - action: script.thermostat_stop_heating
            data:
              message: "Карантин перед включением отопления окончен → отопление включено"
        else:
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: >-
                Карантин перед включением отопления окончен, но никого нет дома либо
                отопление запрещено → отопление не включено

  ###############################################
  ## Thermostat Emergency Control
  ###############################################

  - alias: Thermostat Freeze Alert at Night
    id: thermostat_freeze_alert_at_night
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: binary_sensor.freeze_alert_at_night
        to: "on"
        for: "00:05:00"
      - trigger: time_pattern
        hours: "/1"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: state
        entity_id: binary_sensor.freeze_alert_at_night
        state: "on"
      # Continue if people are home or if presense is ignored
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.people_home', 'on') or
            is_state('input_boolean.ignore_people_presence', 'on')}}
      # If thermostat is in «heat» mode and temperature is below 19°C or if thermostat is in «off» mode
      - condition: template
        value_template: >
          {{ (states('climate.family_room') == 'heat' and
              state_attr('climate.family_room', 'temperature') <= 19.0) or
              states('climate.family_room') == 'off' }}
    actions:
      # Reset all active timers that could affect heating
      - action: timer.cancel
        entity_id:
          - timer.heating_quarantine
          - timer.short_heating
          - timer.pause_heating
      # Notify about low temperature
      - action: notify.mobile_app_sm_s901b
        data:
          title: *sys_notify_title_info
          message: &notification_freeze_alert_at_night >-
            Термостат был снова включен в {{ states('sensor.time') }}, чтобы вы не замёрзли
      # Stop heating by setting default temperature on thermostat
      - action: script.thermostat_stop_heating
        data:
          message: "Температура упала ниже порога ночью → термостат переведён на 21°C"

  - alias: Thermostat Preheat Alert
    id: thermostat_preheat_alert
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: numeric_state
        entity_id: climate.family_room
        attribute: current_temperature
        above: 24.0
        for: "00:05:00"
      - trigger: time_pattern
        hours: "/1"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: numeric_state
        entity_id: climate.family_room
        attribute: current_temperature
        above: 24.0
      # If thermostat is in «heat» mode and temperature is above 24°C
      - condition: template
        value_template: >
          {{ states('climate.family_room') == 'heat' and
              state_attr('climate.family_room', 'temperature') >= 25.0 }}
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: >
            Термостат был переведён в автоматический режим по причине высокой температуры в квартире в {{ states('sensor.time') }}
      # Stop heating by setting default temperature on thermostat
      - action: script.thermostat_stop_heating
        data:
          message: "Температура поднялась выше порога → термостат переведён на 21°C"

  - alias: Thermostat Low Temperature Notification
    id: thermostat_low_temperature_notification
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: binary_sensor.freeze_alert_at_night
        to: "on"
        for: "00:05:00"
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: "Температура упала ниже порога"
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: "Температура упала ниже порога"

  # If Thermostat is heating for more then 1 hour - notify about it and disable heating for 1 hour
  - alias: Thermostat Heating Duration Alert
    id: thermostat_heating_duration_alert
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: binary_sensor.thermostat_heating
        to: "on"
        for: "01:00:00"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
    actions:
      # Cancel all active timers that could affect heating
      - action: timer.cancel
        entity_id:
          - timer.heating_quarantine
          - timer.short_heating
          - timer.pause_heating
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: "Термостат работает более часа → отопление отключено на 1 час в {{ states('sensor.time') }}"
      # Start "Pause Heating" timer
      - action: timer.start
        entity_id: timer.pause_heating
      # Stop heating by setting default temperature on thermostat
      - action: script.thermostat_stop_heating
        data:
          message: "Термостат работает более часа → отопление отключено на 1 час"

  ###############################################
  ## Short Heating
  ###############################################

  - alias: Short Heating Start
    id: short_heating_start
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_button.thermostat_10_minutes_heating
    actions:
      - if:
          - or:
              - condition: state
                entity_id: binary_sensor.thermostat_heating
                state: "on"
              - condition: state
                entity_id: timer.short_heating
                state: "active"
        then:
          - action: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_id: Квартира уже подогревается
              media_content_type: text
        else:
          # Reset all active timers that could affect heating
          - action: timer.cancel
            entity_id:
              - timer.heating_quarantine
              - timer.short_heating
              - timer.pause_heating
          # Start "Short Heating" timer
          - action: timer.start
            entity_id: timer.short_heating
          # Notify about heating start
          - action: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_id: Включен кратковременный подогрев квартиры
              media_content_type: text
          # Start heating
          - action: script.thermostat_start_heating
            data:
              message: "Включен кратковременный подогрев квартиры"

  - alias: Short Heating End
    id: short_heating_end
    mode: single
    max_exceeded: silent
    triggers:
      # Trigger on timer finish
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.short_heating
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
    actions:
      - action: media_player.play_media
        entity_id: media_player.yandex_station_midi
        data:
          media_content_id: Кратковременный подогрев квартиры окончен
          media_content_type: text
      - if:
          # ETRVs should not be requesting heat
          - condition: state
            entity_id: binary_sensor.etrvs_requesting_heat
            state: "off"
          # Bathroom heating should not be requested
          - condition: state
            entity_id: binary_sensor.heating_request_bathroom
            state: "off"
        then:
          # Stop heating by setting default temperature on thermostat
          - action: script.thermostat_stop_heating
            data:
              message: "Кратковременный подогрев квартиры окончен"

  ###############################################
  ## Presence Control
  ###############################################

  - alias: Disable Heating When Noone Home
    id: disable_heating_when_noone_home
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: binary_sensor.people_home
        to: "off"
        for: "00:05:00"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: state
        entity_id: binary_sensor.thermostat_active
        state: "on"
      - condition: state
        entity_id: input_boolean.ignore_people_presence
        state: "off"
    actions:
      # Reset all active timers that could affect heating
      - action: timer.cancel
        entity_id:
          - timer.heating_quarantine
          - timer.short_heating
          - timer.pause_heating
      # Stop heating by setting default temperature on thermostat  and disable it
      - action: script.disable_thermostat
        data:
          message: "Никого нет дома → отопление выключено"

  - alias: Restore Heating When Someone Home
    id: restore_heating_when_someone_home
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: binary_sensor.people_home
        to: "on"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: state
        entity_id: binary_sensor.thermostat_active
        state: "off"
    actions:
      # If some window is opened, restore thermostat in "off" mode
      - if:
          - condition: state
            entity_id: binary_sensor.windows
            state: "on"
        then:
          # Stop heating by setting default temperature on thermostat  and disable it
          - action: script.disable_thermostat
            data:
              message: "Окно открыто при возращении домой → отопление всё ещё выключено"
        # If all windows are closed, restore thermostat in "heat" mode
        else:
          # Stop heating by setting default temperature on thermostat
          - action: script.thermostat_stop_heating
            data:
              message: "Возвращение домой → отопление включено"

  ###############################################
  ## Main home heating logic
  ###############################################

  # If one of ETRV is in "heat" state and climate.family_room is not in "heat" state,
  # and all windows are closed - set new thermostat target temperature by adding 2°C to
  # the current temperature to force enable heating.
  - alias: Start Heating by ETRV Request
    id: start_heating_by_etrv_request
    mode: single
    max_exceeded: silent
    triggers:
      # Trigger if some of ETRVs are requesting heat
      - trigger: state
        entity_id: binary_sensor.etrvs_requesting_heat
        to: "on"
        for: 00:01:00
      # Trigger every 2 minutes to account for any changes in conditions
      - trigger: time_pattern
        minutes: "/2"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If some of ETRVs are requesting heat (in case if automation was triggered by time_pattern)
      - condition: state
        entity_id: binary_sensor.etrvs_requesting_heat
        state: "on"
      # If all windows are closed for at least 5 minutes (time gap between window close and timer start)
      - condition: state
        entity_id: binary_sensor.windows
        state: "off"
        for: "00:05:00"
      # If not in quarantine time after windows were closed
      - condition: state
        entity_id: timer.heating_quarantine
        state: "idle"
      # If heating is not manually paused
      - condition: state
        entity_id: timer.pause_heating
        state: "idle"
      # If short heating is not in progress
      - condition: state
        entity_id: timer.short_heating
        state: "idle"
      # If people are home or if presense is ignored
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.people_home', 'on') or
            is_state('input_boolean.ignore_people_presence', 'on')}}
      # If not already heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "off"
    actions:
      # Start heating
      - action: script.thermostat_start_heating
      # Reset flag cause all conditions are met and we could allow heating again
      - action: input_boolean.turn_on
        entity_id: input_boolean.heating_allowed

  - alias: Start Heating in Bathroom
    id: start_heating_in_bathroom
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.heating_request_bathroom
        to: "on"
    condition: # Ignore windows state, we need to heat the bathroom
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If heating is not manually paused
      - condition: state
        entity_id: timer.pause_heating
        state: "idle"
      # If short heating is not in progress
      - condition: state
        entity_id: timer.short_heating
        state: "idle"
      # Continue if people are home or if presense is ignored
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.people_home', 'on') or
            is_state('input_boolean.ignore_people_presence', 'on')}}
      # If not already heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "off"
    action:
      - action: script.thermostat_start_heating

  # If all ETRVs are not in "heat" state - restore climate.family_room target temperature.
  - alias: Stop Heating by ETRV Request
    id: stop_heating_by_etrv_request
    mode: single
    max_exceeded: silent
    triggers:
      # Trigger if all ETRVs are not requesting heat
      - trigger: state
        entity_id: binary_sensor.etrvs_requesting_heat
        to: "off"
        for: 00:01:00
      # Trigger if bathroom is not requesting heat
      - trigger: state
        entity_id: binary_sensor.heating_request_bathroom
        to: "off"
        for: 00:01:00
      # Trigger every 2 minutes
      - trigger: time_pattern
        minutes: "/2"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If all ETRVs are not requesting heat
      - condition: state
        entity_id: binary_sensor.etrvs_requesting_heat
        state: "off"
      # If bathroom is not requesting heat
      - condition: state
        entity_id: binary_sensor.heating_request_bathroom
        state: "off"
      # If short heating is not in progress
      - condition: state
        entity_id: timer.short_heating
        state: "idle"
      # If actually heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "on"
    actions:
      # Stop heating by setting default temperature on thermostat
      - action: script.thermostat_stop_heating
        data:
          message: "ETRVs не запрашивают отопление → температура возвращена на 21°C"

  ###############################################
  ## Extra Heating Control
  ###############################################

  # Start "Pause Heating" timer if "Heating Allowed" flag was reset
  # Heating will be enabled again in "Start Heating by ETRV Request" automation
  - alias: Start Pause Heating Manually
    id: start_pause_heating_manually
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: input_boolean.heating_allowed
        to: "off"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If actually heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "on"
    action:
      # If short heating is in progress, notify that heating was stopped
      - if:
          - condition: state
            entity_id: timer.short_heating
            state: "active"
        then:
          # Notify that heating was stopped
          - action: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_id: Подогрев квартиры окончен раньше вручную
              media_content_type: text
      # Reset all active timers that could affect heating
      - action: timer.cancel
        entity_id:
          - timer.heating_quarantine
          - timer.short_heating
          - timer.pause_heating
      # Start "Pause Heating" timer
      - action: timer.start
        entity_id: timer.pause_heating
      # Stop heating by setting default temperature on thermostat
      - action: script.thermostat_stop_heating
        data:
          message: "Отопление заблокировано вручную → температура возвращена на 21°C"

  # Cancel "Pause Heating" timer if "Heating Allowed" flag was set
  - alias: Cancel Pause Heating Manually
    id: cancel_pause_heating_manually
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: input_boolean.heating_allowed
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If "Pause Heating" timer is active
      - condition: state
        entity_id: timer.pause_heating
        state: "active"
    action:
      # Cancel "Pause Heating" timer
      - action: timer.cancel
        entity_id: timer.pause_heating
      # Notify that heating was restored
      - action: media_player.play_media
        entity_id: media_player.yandex_station_midi
        data:
          media_content_id: Блокировка отопления отменена вручную
          media_content_type: text
      # Log the message
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: "Блокировка отопления отменена вручную"

  ###############################################
  ## Logging
  ###############################################

  # Log changes of all heating-related entities
  - alias: Log Heating Changes
    id: log_heating_changes
    mode: parallel
    max: 10
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.thermostat_heating
          - binary_sensor.thermostat_active
          - binary_sensor.etrvs_requesting_heat
          - binary_sensor.heating_request_bathroom
          - binary_sensor.freeze_alert_at_night
          - binary_sensor.windows
          - binary_sensor.people_home
          - input_boolean.heating_season
          - input_boolean.ignore_people_presence
          - input_boolean.heating_allowed
          - input_number.thermostat_new_target_temperature
          - timer.heating_quarantine
          - timer.short_heating
          - timer.pause_heating
    actions:
      # Log changes only if from_state and to_state are defined
      - condition: template
        value_template: >-
          {{ trigger.from_state is not none and trigger.to_state is not none }}
      - service: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: >-
            {% set entity_name = states[trigger.entity_id].name | default(trigger.entity_id) %}
            {% set new_state = trigger.to_state.state %}
            {% set old_state = trigger.from_state.state %}
            Изменено состояние "{{ entity_name }}" с {{ old_state }} на {{ new_state }}

  ###############################################
  ## DANFOSS ETRV WINDOW SENSOR MAPPING
  ###############################################

  - alias: Sync Danfoss ETRV Window Contact Kitchen
    id: sync_danfoss_etrv_window_contact_kitchen
    mode: queued
    max: 3
    trigger:
      - platform: state
        entity_id: binary_sensor.kitchen_window_contact
        to:
          - "off"
          - "on"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: template
        value_template: >
          {{ not is_state('switch.danfoss_etrv0103_kitchen_external_window_sensor', trigger.to_state.state) }}
    action:
      - service: "switch.turn_{{ trigger.to_state.state }}"
        target:
          entity_id: switch.danfoss_etrv0103_kitchen_external_window_sensor

  - alias: Sync Danfoss ETRV Window Contact Bedroom
    id: sync_danfoss_etrv_window_contact_bedroom
    mode: queued
    max: 3
    trigger:
      - platform: state
        entity_id: binary_sensor.bedroom_window_contact
        to:
          - "off"
          - "on"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: template
        value_template: >
          {{ not is_state('switch.danfoss_etrv0100_bedroom_external_window_sensor', trigger.to_state.state) }}
    action:
      - service: "switch.turn_{{ trigger.to_state.state }}"
        target:
          entity_id: switch.danfoss_etrv0100_bedroom_external_window_sensor

  - alias: Sync Danfoss ETRV Window Contact Living Room
    id: sync_danfoss_etrv_window_contact_living_room
    mode: queued
    max: 3
    trigger:
      - platform: state
        entity_id: binary_sensor.living_room_window_contact
        to:
          - "off"
          - "on"
    condition:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: template
        value_template: >
          {{ not is_state('switch.danfoss_etrv0103_living_room_external_window_sensor', trigger.to_state.state) }}
    action:
      - service: "switch.turn_{{ trigger.to_state.state }}"
        target:
          entity_id: switch.danfoss_etrv0103_living_room_external_window_sensor
