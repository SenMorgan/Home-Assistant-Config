######################################################################
# File: thermostat.yaml                                              #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2022-11-30                                                   #
#                                                                    #
# Info: this file contains automations that are associated to the    #
# Climate (Thermostat).                                              #
#                                                                    #
# Copyright (c) 2022 Sen Morgan                                      #
######################################################################

###############################################
## SETTINGS AND VARIABLES
###############################################
homeassistant:
  customize:
    package.node_anchors:
      sys_notify_title_info: &sys_notify_title_info "💬 Системное уведомление"
      sys_notify_title_warning: &sys_notify_title_warning "⚠️ Предупреждение"
      sys_notify_title_critical: &sys_notify_title_critical "🚨 Внимание!"

###############################################
## SCHEDULERS
###############################################
schedule:
  bathroom_heating_evening:
    name: "Bathroom Heating Evening"
    monday: &bathroom_heating_schedule
      - from: "17:40:00"
        to: "18:00:00"
    tuesday: *bathroom_heating_schedule
    wednesday: *bathroom_heating_schedule
    thursday: *bathroom_heating_schedule
    friday: *bathroom_heating_schedule
    saturday: *bathroom_heating_schedule
    sunday: *bathroom_heating_schedule

###############################################
## INPUT TEXTS
###############################################
input_text:
  heating_log:
    name: Heating Log
    initial: ""

###############################################
## INPUT BOOLEANS
###############################################
input_boolean:
  heating_season:
    name: Heating Season
    icon: mdi:radiator
  heating_allowed:
    name: Heating Allowed
    icon: mdi:radiator

###############################################
## BINARY SENSORS
###############################################
binary_sensor:
  - platform: template
    sensors:
      thermostat_heating:
        friendly_name: Thermostat is heating
        device_class: heat
        value_template: >
          {{ is_state_attr('climate.family_room', 'hvac_action', "heating") }}
      freeze_alert_at_night:
        friendly_name: Temperature is below 19°C at night
        device_class: cold
        value_template: >
          {{ now().hour >= 0 and now().hour < 6 and
            ((state_attr('climate.family_room', 'current_temperature') | float(0) < 19.0) or
            (states('sensor.ble_temperature_atc_bedroom') | float(0) < 19.0) or
            (states('sensor.ble_temperature_atc_living_room') | float(0) < 19.0)) }}
      heating_request_bedroom:
        friendly_name: Heating Request Bedroom
        device_class: heat
        value_template: >
          {{ state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'current_temperature') | float <
            state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'temperature') | float }}
      heating_request_kitchen:
        friendly_name: Heating Request Kitchen
        device_class: heat
        value_template: >
          {{ state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'current_temperature') | float <
            state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'temperature') | float }}
      heating_request_living_room:
        friendly_name: Heating Request Living Room
        device_class: heat
        value_template: >
          {{ state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'current_temperature') | float <
            state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'temperature') | float }}
      heating_request_bathroom:
        friendly_name: Heating Request Bathroom
        device_class: heat
        value_template: >
          {{ (states('sensor.ble_temperature_atc_bathroom') | float(0) <
            states('input_number.bathroom_heating_target_temperature') | float(24)) and
            is_state('schedule.bathroom_heating_evening', 'on') }}
      etrvs_requesting_heat:
        friendly_name: ETRVs are requesting heat
        device_class: heat
        value_template: >
          {{ is_state('binary_sensor.danfoss_etrv0100_bedroom_heat_required', 'on') or
            is_state('binary_sensor.danfoss_etrv0103_kitchen_heat_required', 'on') or
            is_state('binary_sensor.danfoss_etrv0103_living_room_heat_required', 'on') }}

###############################################
## INPUT BUTTONS
###############################################
input_button:
  thermostat_10_minutes_heating:
    name: Heat 10 Minutes
    icon: mdi:radiator

###############################################
## INPUT DATETIMES
###############################################
input_datetime:
  thermostat_10_minutes_heating_time_end:
    name: Thermostat 10 Minutes Heating Time End
    has_date: true
    has_time: true
  thermostat_windows_close_delay_time_end:
    name: Thermostat Windows Close Delay Time End
    has_date: true
    has_time: true

###############################################
## INPUT NUMBERS
###############################################
input_number:
  thermostat_default_target_temperature:
    name: Thermostat Default Target Temperature
    min: 18.0
    max: 25.0
    initial: 20.0
  thermostat_new_target_temperature:
    name: Thermostat New Target Temperature
    min: 15.0
    max: 30.0
    initial: 20.0
  etrv_bedroom_default_temperature:
    name: ETRV Bedroom Default Temperature
    step: 0.5
    min: 18.0
    max: 25.0
    initial: 21.0
  etrv_kitchen_default_temperature:
    name: ETRV Kitchen Default Temperature
    step: 0.5
    min: 18.0
    max: 25.0
    initial: 21.0
  etrv_living_room_default_temperature:
    name: ETRV Living Room Default Temperature
    step: 0.5
    min: 18.0
    max: 25.0
    initial: 21.0
  etrv_min_target_temperature:
    name: ETRV Min Target Temperature
    step: 0.5
    min: 17.0
    max: 21.0
    initial: 19.0
  etrv_max_target_temperature:
    name: ETRV Max Target Temperature
    step: 0.5
    min: 21.0
    max: 25.0
    initial: 23.0
  bathroom_heating_target_temperature:
    name: Bathroom Heating Target Temperature
    step: 0.5
    min: 20.0
    max: 25.0
    initial: 24.0

###############################################
## SCRIPTS
###############################################
script:
  thermostat_start_heating:
    alias: Thermostat Start Heating
    sequence:
      # Set thermostat mode to «heat» and wait until 'temperature' attribute will become not "None"
      - action: climate.set_hvac_mode
        entity_id: climate.family_room
        data:
          hvac_mode: "heat"
      # Wait till thermostat will be ready to accept new target temperature
      - wait_template: "{{ state_attr('climate.family_room', 'temperature') != None }}"
        timeout: "00:30:00"
      # Set new thermostat target temperature by adding 2°C to the current temperature
      - action: input_number.set_value
        data:
          entity_id: input_number.thermostat_new_target_temperature
          value: "{{ (state_attr('climate.family_room', 'current_temperature') | float(24)) + 2 }}"
      # Send new target temperature to thermostat
      - action: climate.set_temperature
        entity_id: climate.family_room
        data:
          temperature: "{{ states('input_number.thermostat_new_target_temperature') }}"
      # Wait here until actual target temperature is the same as new target temperature
      - wait_template: |
          {{ state_attr('climate.family_room', 'temperature') ==
          (states('input_number.thermostat_new_target_temperature') | float(0)) }}
        timeout: "00:01:00"
        continue_on_timeout: false
      - action: automation.turn_on
        entity_id: automation.thermostat_etrv_heating_disable
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: >-
            {% set room_names = {
              'binary_sensor.danfoss_etrv0100_bedroom_heat_required': 'спальне',
              'binary_sensor.danfoss_etrv0103_kitchen_heat_required': 'кухне',
              'binary_sensor.danfoss_etrv0103_living_room_heat_required': 'гостиной',
              'binary_sensor.heating_request_bathroom': 'ванной'
            } %}
            {% set rooms = namespace(list=[]) %}
            {% for entity_id, room_name in room_names.items() %}
              {% if is_state(entity_id, 'on') %}
                {% set rooms.list = rooms.list + [room_name] %}
              {% endif %}
            {% endfor %}
            ETRVs запрашивают отопление в
            {{ rooms.list[:-1] | join(', ') }}
            {% if rooms.list | length > 1 %}и{% endif %}
            {{ rooms.list[-1] if rooms.list | length > 0 else '' }}

  thermostat_set_default_temperature:
    alias: Thermostat Set Default Temperature
    sequence:
      - variables:
          # thermostat_default_target_temperature: "{{ states('input_number.thermostat_default_target_temperature') | float(21) }}"
          # Set the temparature to 21 degrees to avoid any issues
          default_temperature: 21
      # Log the message if provided
      - if: "{{ message is defined }}"
        then:
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "{{ message }}"
      # Check if thermostat is ready to accept new target temperature and enable it if not
      - if:
          - condition: template
            value_template: "{{ state_attr('climate.family_room', 'temperature') == None }}"
        then:
          # Repeat the command to ensure that the thermostat is enabled
          - repeat:
              while:
                - condition: template
                  value_template: "{{ state_attr('climate.family_room', 'temperature') == None }}"
                - condition: template
                  value_template: "{{ repeat.index <= (12 * 5) }}"
              sequence:
                - action: climate.set_hvac_mode
                  entity_id: climate.family_room
                  data:
                    hvac_mode: "heat"
                - delay: 5
      # Repeat the command to ensure that the thermostat is set to the default temperature
      - repeat:
          while:
            - condition: template
              value_template: "{{ state_attr('climate.family_room', 'temperature') != default_temperature }}"
            - condition: template
              value_template: "{{ repeat.index <= (12 * 5) }}"
          sequence:
            - action: climate.set_temperature
              entity_id: climate.family_room
              data:
                temperature: "{{ default_temperature }}"
            - delay: 5
      # Wait here until actual target temperature is the same as new target temperature
      - wait_template: |
          {{ state_attr('climate.family_room', 'temperature') == default_temperature }}
        timeout: "00:01:00"

  disable_thermostat:
    alias: Disable Thermostat
    sequence:
      # Firstly, reset the thermostat to the default target temperature to avoid any issues later
      - action: script.turn_on
        entity_id: script.thermostat_set_default_temperature
      # Wait for the script to finish
      - wait_template: "{{ is_state('script.thermostat_set_default_temperature', 'off') }}"
        timeout: "00:01:00"
      # Log the message if provided
      - if: "{{ message is defined }}"
        then:
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "{{ message }}"
      # Repeat the command to ensure that the thermostat is disabled
      - repeat:
          while:
            - condition: template
              value_template: "{{ not is_state_attr('climate.family_room', 'hvac_action', 'off') }}"
            - condition: template
              value_template: "{{ repeat.index <= (12 * 5) }}" # 5 minutes
          sequence:
            - action: climate.set_hvac_mode
              entity_id: climate.family_room
              data:
                hvac_mode: "off"
            - delay: 5

###############################################
## AUTOMATIONS
###############################################
automation:
  ###############################################
  ## Thermostat ECO Mode by Window
  ###############################################
  - alias: Thermostat ECO Mode by Window Enable
    id: thermostat_eco_mode_by_window_enable
    mode: restart
    triggers:
      - trigger: state
        entity_id: binary_sensor.windows
        id: Some Window Opened
        from: "off"
        to: "on"
        for: "00:00:10"
      - trigger: state
        entity_id: binary_sensor.windows
        id: All Windows Closed
        from: "on"
        to: "off"
        for: "00:00:10"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
        # If some window was opened and thermostat is in «heat» mode
        # or if all windows were closed and thermostat is in «off» mode
      - condition: template
        value_template: >
          {{ (states('climate.family_room') == 'heat' and is_state('binary_sensor.windows', 'on')) or
              (states('climate.family_room') == 'off' and is_state('binary_sensor.windows', 'off')) }}
    actions:
      - if:
          - condition: state
            entity_id: binary_sensor.windows
            state: "on"
        # If some window was opened
        then:
          # Set thermostat default target temperature and disable it
          - action: script.disable_thermostat
            data:
              message: "Открыто окно → отопление выключено"
          # Do not allow heating for 30 minutes
          - action: input_boolean.turn_off
            entity_id: input_boolean.heating_allowed
          # If «10 minutes heating» automation is enabled now - disable it
          - if:
              - condition: state
                entity_id: automation.thermostat_10_minutes_heating_disable
                state: "on"
            then:
              - action: media_player.play_media
                entity_id: media_player.yandex_station_midi
                data:
                  media_content_id: Подогрев квартиры окончен раньше, потому что было открыто окно
                  media_content_type: text
              # Disable «10 minutes heating» automation
              - action: automation.turn_off
                entity_id: automation.thermostat_10_minutes_heating_disable
        # If all windows were closed
        else:
          # Wait 30 minutes before restoring thermostat mode (qurantine period)
          - action: input_datetime.set_datetime
            data:
              entity_id: input_datetime.thermostat_windows_close_delay_time_end
              datetime: "{{ now() + timedelta(minutes=30) }}"
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "Окна закрыты → 30 минут карантина перед включением отопления"
          - action: automation.turn_on
            entity_id:
              - automation.thermostat_eco_mode_by_window_reset
              - automation.thermostat_eco_mode_by_window_disable

  - alias: Thermostat ECO Mode by Window Reset
    id: thermostat_eco_mode_by_window_reset
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.windows
        from: "off"
        to: "on"
        for: "00:00:05"
    actions:
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: "Открыто окно → карантин отменён"
      - action: automation.turn_off
        entity_id:
          - automation.thermostat_eco_mode_by_window_disable
          - automation.thermostat_eco_mode_by_window_reset

  - alias: Thermostat ECO Mode by Window Disable
    id: thermostat_eco_mode_by_window_disable
    mode: single
    triggers:
      # Trigger every 1 minute
      - trigger: time_pattern
        minutes: "/1"
    conditions:
      # We use here template condition because time condition ignores date part of timestamp
      - condition: template
        value_template: "{{ as_timestamp(now()) > as_timestamp(states('input_datetime.thermostat_windows_close_delay_time_end'), 0) }}"
    actions:
      # Allow heating
      - action: input_boolean.turn_on
        entity_id: input_boolean.heating_allowed
      # Set thermostat mode to «heat» only if someone is home
      - if:
          # Continue if people are home or if presense is ignored
          - condition: template
            value_template: >
              {{ is_state('binary_sensor.people_home', 'on') or
                is_state('input_boolean.ignore_people_presence', 'on')}}
        then:
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "Карантин после закрытия окон окончен → отопление включено"
          - action: climate.set_hvac_mode
            entity_id: climate.family_room
            data:
              hvac_mode: "heat"
      - action: automation.turn_off
        entity_id:
          - automation.thermostat_eco_mode_by_window_reset
          - automation.thermostat_eco_mode_by_window_disable

  ###############################################
  ## Thermostat Emergency Control
  ###############################################

  - alias: Thermostat Freeze Alert at Night
    id: thermostat_freeze_alert_at_night
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.freeze_alert_at_night
        to: "on"
        for: "00:05:00"
      - trigger: time_pattern
        hours: "/1"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: state
        entity_id: binary_sensor.freeze_alert_at_night
        state: "on"
      # Continue if people are home or if presense is ignored
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.people_home', 'on') or
            is_state('input_boolean.ignore_people_presence', 'on')}}
      # If thermostat is in «heat» mode and temperature is below 19°C or if thermostat is in «off» mode
      - condition: template
        value_template: >
          {{ (states('climate.family_room') == 'heat' and
              state_attr('climate.family_room', 'temperature') <= 19.0) or
              states('climate.family_room') == 'off' }}
    actions:
      - action: notify.mobile_app_sm_s901b
        data:
          title: *sys_notify_title_info
          message: &notification_freeze_alert_at_night >-
            Термостат был снова включен в {{ states('sensor.time') }}, чтобы вы не замёрзли
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: "Температура упала ниже порога ночью → термостат переведён на 21°C"
      # Set thermostat mode to «heat»
      - action: climate.set_hvac_mode
        entity_id: climate.family_room
        data:
          hvac_mode: "heat"
      # Wait till thermostat will be ready to accept new target temperature
      - wait_template: "{{ state_attr('climate.family_room', 'temperature') != None }}"
        timeout: "00:30:00"
      # Set temperature to 21°C
      - action: climate.set_temperature
        entity_id: climate.family_room
        data:
          temperature: 21

  - alias: Thermostat Preheat Alert
    id: thermostat_preheat_alert
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.family_room
        attribute: current_temperature
        above: 24.0
        for: "00:05:00"
      - trigger: time_pattern
        hours: "/1"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: numeric_state
        entity_id: climate.family_room
        attribute: current_temperature
        above: 24.0
      # If thermostat is in «heat» mode and temperature is above 24°C
      - condition: template
        value_template: >
          {{ states('climate.family_room') == 'heat' and
              state_attr('climate.family_room', 'temperature') >= 25.0 }}
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: >
            Термостат был переведён в автоматический режим по причине высокой температуры в квартире в {{ states('sensor.time') }}
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: "Температура поднялась выше порога → термостат переведён на 21°C"
      # Set thermostat mode to «heat»
      - action: climate.set_hvac_mode
        entity_id: climate.family_room
        data:
          hvac_mode: "heat"
      # Wait till thermostat will be ready to accept new target temperature
      - wait_template: "{{ state_attr('climate.family_room', 'temperature') != None }}"
        timeout: "00:30:00"
      # Set temperature to 21°C
      - action: climate.set_temperature
        entity_id: climate.family_room
        data:
          temperature: 21

  - alias: Thermostat Low Temperature Notification
    id: thermostat_low_temperature_notification
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.freeze_alert_at_night
        to: "on"
        for: "00:05:00"
    actions:
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_warning
          message: "Температура упала ниже порога"
      - action: input_text.set_value
        data:
          entity_id: input_text.heating_log
          value: "Температура упала ниже порога"

  ###############################################
  ## Thermostat 10 Minutes Heating
  ###############################################

  - alias: Thermostat 10 Minutes Heating Enable
    id: thermostat_10_minutes_heating_enable
    mode: single
    triggers:
      - trigger: state
        entity_id: input_button.thermostat_10_minutes_heating
    actions:
      - if:
          - or:
              - condition: state
                entity_id: binary_sensor.thermostat_heating
                state: "on"
              - condition: state
                entity_id: automation.thermostat_10_minutes_heating_disable
                state: "on"
        then:
          - action: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_id: Подогрев квартиры уже включен
              media_content_type: text
        else:
          # If «ECO mode by windows» automation is enabled now - disable it
          - if:
              - condition: state
                entity_id: automation.thermostat_eco_mode_by_window_disable
                state: "on"
            then:
              - action: automation.turn_off
                entity_id:
                  - automation.thermostat_eco_mode_by_window_reset
                  - automation.thermostat_eco_mode_by_window_disable
          - action: media_player.play_media
            entity_id: media_player.yandex_station_midi
            data:
              media_content_id: Включен подогрев квартиры на 10 минут
              media_content_type: text
          # Turn on the heating flag. This prevents the heating from being blocked if
          # the `thermostat_eco_mode_by_window_enable` automation has already turned off the heating.
          - action: input_boolean.turn_on
            entity_id: input_boolean.heating_allowed
          # Set thermostat mode to «heat» and wait until 'temperature' attribute will become not "None"
          - action: climate.set_hvac_mode
            entity_id: climate.family_room
            data:
              hvac_mode: "heat"
          # Wait till thermostat will be ready to accept new target temperature
          - wait_template: "{{ state_attr('climate.family_room', 'temperature') != None }}"
            timeout: "00:30:00"
          # Set new thermostat target temperature by adding 1°C to the current temperature
          - action: input_number.set_value
            data:
              entity_id: input_number.thermostat_new_target_temperature
              value: "{{ (state_attr('climate.family_room', 'current_temperature') | float(23)) + 1  }}"
          - action: script.turn_on
            entity_id: script.tell_what_windows_are_opened
          # Increase thermostat temperature by 1°C from current temperature
          - action: climate.set_temperature
            entity_id: climate.family_room
            data:
              temperature: "{{ states('input_number.thermostat_new_target_temperature') }}"
          # Set heating_time_end to a time ten minutes in the future
          - action: input_datetime.set_datetime
            data:
              entity_id: input_datetime.thermostat_10_minutes_heating_time_end
              datetime: "{{ now() + timedelta(minutes=10) }}"
          # Wait here until actual target temperature is the same as new target temperature
          - wait_template: |
              {{ state_attr('climate.family_room', 'temperature') ==
              (states('input_number.thermostat_new_target_temperature') | float(0)) }}
            timeout: "00:01:00"
            continue_on_timeout: false
          - action: automation.turn_on
            entity_id: automation.thermostat_10_minutes_heating_disable
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "Включен подогрев квартиры на 10 минут"

  - alias: Thermostat 10 Minutes Heating Disable
    id: thermostat_10_minutes_heating_disable
    mode: single
    triggers:
      # Trigger every 30 seconds
      - trigger: time_pattern
        seconds: "/30"
      # Or if thermostat changed it's mode
      - trigger: state
        entity_id: climate.family_room
    conditions:
      # Either time condition or thermostat mode condition
      - or:
          # We use here template condition because time condition ignores date part of timestamp
          - condition: template
            value_template: "{{ as_timestamp(now()) > as_timestamp(states('input_datetime.thermostat_10_minutes_heating_time_end'), 0) }}"
          - condition: template
            value_template: "{{ not is_state('climate.family_room', 'heat') }}"
            # Compare new target temperature with actual target temperature to know if the temperature was manually changed
          - condition: template
            value_template: |
              {{ state_attr('climate.family_room', 'temperature') !=
              (states('input_number.thermostat_new_target_temperature') | float(0)) }}
    actions:
      - action: media_player.play_media
        entity_id: media_player.yandex_station_midi
        data:
          media_content_id: Подогрев квартиры окончен
          media_content_type: text
      # Set thermostat default target temperature
      - action: script.thermostat_set_default_temperature
        data:
          message: "Подогрев квартиры окончен"
      - action: automation.turn_off
        entity_id: automation.thermostat_10_minutes_heating_disable

  ###############################################
  ## Thermostat ECO Mode When Noone Home
  ###############################################

  - alias: Thermostat ECO Mode When Noone Home Enable
    id: thermostat_eco_mode_when_noone_home_enable
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.people_home
        to: "off"
        for: "00:05:00"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: template
        value_template: "{{ not is_state('climate.family_room', 'off') }}"
      - condition: state
        entity_id: input_boolean.ignore_people_presence
        state: "off"
    actions:
      # Set thermostat default target temperature and disable it
      - action: script.disable_thermostat
        data:
          message: "Никого нет дома → отопление выключено"
      # Turn on the heating flag. This prevents the heating from being blocked if
      # the `thermostat_eco_mode_by_window_enable` automation has already turned off the heating.
      - action: input_boolean.turn_on
        entity_id: input_boolean.heating_allowed
      # Enable automation to disable ECO mode when someone will be home
      - action: automation.turn_on
        entity_id: automation.thermostat_eco_mode_when_noone_home_disable
      # Stop all automations that can change thermostat mode
      - action: automation.turn_off
        entity_id:
          - automation.thermostat_eco_mode_by_window_reset
          - automation.thermostat_eco_mode_by_window_disable
          - automation.thermostat_10_minutes_heating_disable

  - alias: Thermostat ECO Mode When Noone Home Disable
    id: thermostat_eco_mode_when_noone_home_disable
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.people_home
        to: "on"
    conditions:
      - condition: template
        value_template: "{{ is_state('climate.family_room', 'off') }}"
    actions:
      # If some window is opened, set thermostat mode to «off» mode
      - if:
          - condition: state
            entity_id: binary_sensor.windows
            state: "on"
        then:
          # Set thermostat default target temperature and disable it
          - action: script.disable_thermostat
            data:
              message: "Окно открыто при возращении домой → отопление всё ещё выключено"
        # If no windows are opened, set thermostat mode to «heat» mode
        else:
          - action: climate.set_hvac_mode
            entity_id: climate.family_room
            data:
              hvac_mode: "heat"
          - action: input_text.set_value
            data:
              entity_id: input_text.heating_log
              value: "Дома кто-то появился → отопление включено"
      # Disable this automation
      - action: automation.turn_off
        entity_id: automation.thermostat_eco_mode_when_noone_home_disable

  ###############################################
  ## Main home heating logic
  ###############################################

  # If one of ETRV is in "heat" state and climate.family_room is not in "heat" state,
  # and all windows are closed - set new thermostat target temperature by adding 2°C to
  # the current temperature to force enable heating.
  - alias: Thermostat ETRV Heating Enable
    id: thermostat_etrv_heating_enable
    mode: single
    triggers:
      # Trigger if some of ETRVs are requesting heat
      - trigger: state
        entity_id: binary_sensor.etrvs_requesting_heat
        to: "on"
        for: 00:01:00
      # Trigger every 2 minutes
      - trigger: time_pattern
        minutes: "/2"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If not waiting after windows were closed
      - condition: state
        entity_id: input_boolean.heating_allowed
        state: "on"
      # Continue if people are home or if presense is ignored
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.people_home', 'on') or
            is_state('input_boolean.ignore_people_presence', 'on')}}
      # If all ETRVs are requesting heat
      - condition: state
        entity_id: binary_sensor.etrvs_requesting_heat
        state: "on"
      # If not already heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "off"
      # If all windows are closed
      - condition: state
        entity_id: binary_sensor.windows
        state: "off"
    actions:
      # Start heating
      - action: script.turn_on
        entity_id: script.thermostat_start_heating

  - alias: Bathroom Heating Enable
    id: bathroom_heating_enable
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.heating_request_bathroom
        to: "on"
    condition:
      # Do not check if heating is allowed "input_boolean.heating_allowed"
      # because we need to heat the bathroom even with windows opened.
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # Continue if people are home or if presense is ignored
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.people_home', 'on') or
            is_state('input_boolean.ignore_people_presence', 'on')}}
      # If not already heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "off"
    action:
      - action: script.turn_on
        entity_id: script.thermostat_start_heating

  # If all ETRVs are not in "heat" state - restore climate.family_room target temperature.
  - alias: Thermostat ETRV Heating Disable
    id: thermostat_etrv_heating_disable
    mode: single
    triggers:
      # Trigger if all ETRVs are not requesting heat
      - trigger: state
        entity_id: binary_sensor.etrvs_requesting_heat
        to: "off"
        for: 00:01:00
      # Trigger if bathroom is not requesting heat
      - trigger: state
        entity_id: binary_sensor.heating_request_bathroom
        to: "off"
        for: 00:01:00
      # Trigger every 2 minutes
      - trigger: time_pattern
        minutes: "/2"
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      # If all ETRVs are not requesting heat
      - condition: state
        entity_id: binary_sensor.etrvs_requesting_heat
        state: "off"
      # If bathroom is not requesting heat
      - condition: state
        entity_id: binary_sensor.heating_request_bathroom
        state: "off"
      # If already heating
      - condition: state
        entity_id: binary_sensor.thermostat_heating
        state: "on"
    actions:
      # Set thermostat default target temperature
      - action: script.thermostat_set_default_temperature
        data:
          message: "ETRVs не запрашивают отопление → температура возвращена на 21°C"

  ###############################################
  ## ETRVs Child Lock
  ###############################################

  # ETRVs do not have child lock themselves so we need to check if taget tempature
  # is in range of min and max target temperature and if not - set it to 21°C
  # Kitchen
  - alias: Thermostat ETRV Temp Out of Range Kitchen
    id: thermostat_etrv_temp_out_of_range_kitchen
    mode: single
    triggers:
      - trigger: state
        entity_id: climate.danfoss_etrv0103_kitchen_thermostat
    conditions:
      - condition: template
        value_template: |
          {{ (state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'temperature') <
          (states('input_number.etrv_min_target_temperature')) | float(17)) or
          (state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'temperature') >
          (states('input_number.etrv_max_target_temperature')) | float(25)) }}
    actions:
      - variables:
          timestamp: "{{ states('sensor.time') }}"
          target_temperature: "{{ state_attr('climate.danfoss_etrv0103_kitchen_thermostat', 'temperature') }}"
          set_temperature: "{{ states('input_number.etrv_kitchen_default_temperature') | float(21) }}"
          message: >-
            Установленная температура на кухне вышла за допустимые пределы в {{ timestamp }}.
            Температура возвращена с {{ target_temperature }}°C на {{ set_temperature }}°C
      - action: climate.set_temperature
        entity_id: climate.danfoss_etrv0103_kitchen_thermostat
        data:
          temperature: "{{ set_temperature }}"
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: "{{ message }}"

  # Bedroom
  - alias: Thermostat ETRV Temp Out of Range Bedroom
    id: thermostat_etrv_temp_out_of_range_bedroom
    mode: single
    triggers:
      - trigger: state
        entity_id: climate.danfoss_etrv0100_bedroom_thermostat
    conditions:
      - condition: template
        value_template: |
          {{ (state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'temperature') <
          (states('input_number.etrv_min_target_temperature')) | float(17)) or
          (state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'temperature') >
          (states('input_number.etrv_max_target_temperature')) | float(25)) }}
    actions:
      - variables:
          timestamp: "{{ states('sensor.time') }}"
          target_temperature: "{{ state_attr('climate.danfoss_etrv0100_bedroom_thermostat', 'temperature') }}"
          set_temperature: "{{ states('input_number.etrv_bedroom_default_temperature') | float(21) }}"
          message: >-
            Установленная температура в спальне вышла за допустимые пределы в {{ timestamp }}.
            Температура возвращена с {{ target_temperature }}°C на {{ set_temperature }}°C
      - action: climate.set_temperature
        entity_id: climate.danfoss_etrv0100_bedroom_thermostat
        data:
          temperature: "{{ set_temperature }}"
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: "{{ message }}"

  # Living Room
  - alias: Thermostat ETRV Temp Out of Range Living Room
    id: thermostat_etrv_temp_out_of_range_living_room
    mode: single
    triggers:
      - trigger: state
        entity_id: climate.danfoss_etrv0103_living_room_thermostat
    conditions:
      - condition: template
        value_template: |
          {{ (state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'temperature') <
          (states('input_number.etrv_min_target_temperature')) | float(17)) or
          (state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'temperature') >
          (states('input_number.etrv_max_target_temperature')) | float(25)) }}
    actions:
      - variables:
          timestamp: "{{ states('sensor.time') }}"
          target_temperature: "{{ state_attr('climate.danfoss_etrv0103_living_room_thermostat', 'temperature') }}"
          set_temperature: "{{ states('input_number.etrv_living_room_default_temperature') | float(21) }}"
          message: >-
            Установленная температура в гостиной вышла за допустимые пределы в {{ timestamp }}.
            Температура возвращена с {{ target_temperature }}°C на {{ set_temperature }}°C
      - action: climate.set_temperature
        entity_id: climate.danfoss_etrv0103_living_room_thermostat
        data:
          temperature: "{{ set_temperature }}"
      - action: script.notify_and_create_persistent_notification
        data:
          title: *sys_notify_title_info
          message: "{{ message }}"
