######################################################################
# File: thermostat.yaml                                              #
# Author: SenMorgan https://github.com/SenMorgan                     #
# Date: 2022-11-30                                                   #
#                                                                    #
# Info: this file contains automations that are associated to the    #
# Climate (Thermostat).                                              #
#                                                                    #
# Copyright (c) 2022 Sen Morgan                                      #
######################################################################

###############################################
## Thermostat ECO Mode by Window
###############################################

- alias: Thermostat ECO Mode by Window Enable
  id: thermostat_eco_mode_by_window_enable
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.windows
      id: Some Window Opened
      from: "off"
      to: "on"
      for: "00:00:10"
    - platform: state
      entity_id: binary_sensor.windows
      id: All Windows Closed
      from: "on"
      to: "off"
      for: "00:00:10"
  condition:
    - condition: state
      entity_id: input_boolean.heating_season_switch
      state: "on"
      # If some window was opened and thermostat is in «heat» mode
      # or if all windows were closed and thermostat is in «off» mode
    - condition: template
      value_template: >
        {{ (states('climate.family_room') == 'heat' and is_state('binary_sensor.windows', 'on')) or
            (states('climate.family_room') == 'off' and is_state('binary_sensor.windows', 'off')) }}
  action:
    - if:
        - condition: state
          entity_id: binary_sensor.windows
          state: "on"
      # If some window was opened
      then:
        # If «10 minutes heating» automation is enabled now - disable it
        - if:
            - condition: state
              entity_id: automation.thermostat_10_minutes_heating_disable
              state: "on"
          then:
            - service: media_player.play_media
              entity_id: media_player.yandex_station
              data:
                media_content_id: Подогрев квартиры окончен раньше, потому что было открыто окно
                media_content_type: text
            # Disable «10 minutes heating» automation
            - service: automation.turn_off
              entity_id: automation.thermostat_10_minutes_heating_disable

        # Set thermostat mode to «off»
        - service: climate.set_hvac_mode
          entity_id: climate.family_room
          data:
            hvac_mode: "off"

      # If all windows were closed
      else:
        # Wait 30 minutes before restoring thermostat mode
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.thermostat_windows_close_delay_time_end
            datetime: "{{ now() + timedelta(minutes=30) }}"
        - service: automation.turn_on
          entity_id:
            - automation.thermostat_eco_mode_by_window_reset
            - automation.thermostat_eco_mode_by_window_disable

- alias: Thermostat ECO Mode by Window Reset
  id: thermostat_eco_mode_by_window_reset
  mode: single
  trigger:
    - platform: state
      entity_id: binary_sensor.windows
      from: "off"
      to: "on"
      for: "00:00:05"
  action:
    - service: automation.turn_off
      entity_id:
        - automation.thermostat_eco_mode_by_window_disable
        - automation.thermostat_eco_mode_by_window_reset

- alias: Thermostat ECO Mode by Window Disable
  id: thermostat_eco_mode_by_window_disable
  mode: single
  trigger:
    # Trigger every 1 minute
    - platform: time_pattern
      minutes: "/1"
  condition:
    # We use here template condition because time condition ignores date part of timestamp
    - condition: template
      value_template: "{{ as_timestamp(now()) > as_timestamp(states('input_datetime.thermostat_windows_close_delay_time_end')) }}"
  action:
    # Set thermostat mode to «heat»
    - service: climate.set_hvac_mode
      entity_id: climate.family_room
      data:
        hvac_mode: "heat"
    - service: automation.turn_off
      entity_id:
        - automation.thermostat_eco_mode_by_window_reset
        - automation.thermostat_eco_mode_by_window_disable

###############################################
## Thermostat Emergency Control
###############################################

- alias: Thermostat Freeze Alert at Nigth
  id: thermostat_freeze_alert_at_night
  mode: single
  trigger:
    - platform: numeric_state
      entity_id: climate.family_room
      attribute: current_temperature
      below: 19.0
      for: "00:05:00"
    - platform: time_pattern
      hours: "/1"
  condition:
    - condition: state
      entity_id: input_boolean.heating_season_switch
      state: "on"
    - condition: numeric_state
      entity_id: climate.family_room
      attribute: current_temperature
      below: 19.0
    - condition: state
      entity_id: binary_sensor.people_home
      state: "on"
    - condition: time
      after: "00:00"
      before: "06:00"
  action:
    - service: notify.mobile_app_sm_s901b
      data:
        title: "{{ 'ℹ️' }} Системное уведомление"
        message: Термостат был снова включен в {{ states('sensor.time') }}, чтобы вы не замёрзли
    # Set thermostat mode to «heat»
    - service: climate.set_hvac_mode
      entity_id: climate.family_room
      data:
        hvac_mode: "heat"
    # Set temperature to 20°C
    - service: climate.set_temperature
      entity_id: climate.family_room
      data:
        temperature: 20

- alias: Thermostat Preheat Alert
  id: thermostat_preheat_alert
  mode: restart
  trigger:
    - platform: numeric_state
      entity_id: climate.family_room
      attribute: current_temperature
      above: 24.0
      for: "00:05:00"
    - platform: time_pattern
      hours: "/1"
  condition:
    - condition: state
      entity_id: input_boolean.heating_season_switch
      state: "on"
    - condition: numeric_state
      entity_id: climate.family_room
      attribute: current_temperature
      above: 24.0
  action:
    - service: notify.mobile_app_sm_s901b
      data:
        title: "{{ '🚨' }} Превышение температуры!"
        message: >
          Термостат был переведён в автоматический режим по причине высокой температуры в квартире в {{ states('sensor.time') }}
    # Set thermostat mode to «heat»
    - service: climate.set_hvac_mode
      entity_id: climate.family_room
      data:
        hvac_mode: "heat"
    # Set temperature to 20°C
    - service: climate.set_temperature
      entity_id: climate.family_room
      data:
        temperature: 20

###############################################
## Thermostat 10 Minutes Heating
###############################################

- alias: Thermostat 10 Minutes Heating Enable
  id: thermostat_10_minutes_heating_enable
  mode: single
  trigger:
    - platform: state
      entity_id: input_button.thermostat_10_minutes_heating
  action:
    - if:
        - condition: state
          entity_id: automation.thermostat_10_minutes_heating_disable
          state: "on"
      then:
        - service: media_player.play_media
          entity_id: media_player.yandex_station
          data:
            media_content_id: Подогрев квартиры уже включен
            media_content_type: text
      else:
        # If «ECO mode by windows» automation is enabled now - disable it
        - if:
            - condition: state
              entity_id: automation.thermostat_eco_mode_by_window_disable
              state: "on"
          then:
            - service: automation.turn_off
              entity_id:
                - automation.thermostat_eco_mode_by_window_reset
                - automation.thermostat_eco_mode_by_window_disable

        - service: media_player.play_media
          entity_id: media_player.yandex_station
          data:
            media_content_id: Включен подогрев квартиры на 10 минут
            media_content_type: text
        # Save actual thermostat target temperature
        - service: input_number.set_value
          data:
            entity_id: input_number.thermostat_saved_target_temperature
            value: "{{ state_attr('climate.family_room', 'temperature') }}"
        # Save new thermostat target temperature by adding 1°C to the current temperature
        - service: input_number.set_value
          data:
            entity_id: input_number.thermostat_new_target_temperature
            value: "{{ state_attr('climate.family_room', 'current_temperature') + 1 }}"
        - service: script.turn_on
          entity_id: script.tell_what_windows_are_opened
        # Set thermostat mode to «heat» and increase temperature by 1°C
        - service: climate.set_hvac_mode
          entity_id: climate.family_room
          data:
            hvac_mode: "heat"
        - service: climate.set_temperature
          entity_id: climate.family_room
          data:
            temperature: "{{ states('input_number.thermostat_new_target_temperature') }}"
        # Set heating_time_end to a time ten minutes in the future
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.thermostat_10_minutes_heating_time_end
            datetime: "{{ now() + timedelta(minutes=10) }}"
        # Wait here until actual target temperature is the same as new target temperature
        - wait_template: |
            {{ state_attr('climate.family_room', 'temperature') ==
            (states('input_number.thermostat_new_target_temperature') | float) }}
          timeout: "00:01:00"
          continue_on_timeout: false
        - service: automation.turn_on
          entity_id: automation.thermostat_10_minutes_heating_disable

- alias: Thermostat 10 Minutes Heating Disable
  id: thermostat_10_minutes_heating_disable
  mode: single
  trigger:
    # Trigger every 30 seconds
    - platform: time_pattern
      seconds: "/30"
    # Or if thermostat changed it's mode
    - platform: state
      entity_id: climate.family_room
  condition:
    # Either time condition or thermostat mode condition
    - condition: or
      conditions:
        # We use here template condition because time condition ignores date part of timestamp
        - condition: template
          value_template: "{{ as_timestamp(now()) > as_timestamp(states('input_datetime.thermostat_10_minutes_heating_time_end')) }}"
        - condition: template
          value_template: "{{ not is_state('climate.family_room', 'heat') }}"
          # Compare new target temperature with actual target temperature to know if the temperature was manually changed
        - condition: template
          value_template: |
            {{ state_attr('climate.family_room', 'temperature') !=
            (states('input_number.thermostat_new_target_temperature') | float) }}
  action:
    - service: media_player.play_media
      entity_id: media_player.yandex_station
      data:
        media_content_id: Подогрев квартиры окончен
        media_content_type: text
    # Restore saved thermostat target temperature
    - service: climate.set_hvac_mode
      entity_id: climate.family_room
      data:
        hvac_mode: "heat"
    - service: climate.set_temperature
      entity_id: climate.family_room
      data:
        temperature: "{{ states('input_number.thermostat_saved_target_temperature') }}"
    - service: automation.turn_off
      entity_id: automation.thermostat_10_minutes_heating_disable

###############################################
## Thermostat ECO Mode When Noone Home
###############################################

- alias: Thermostat ECO Mode When Noone Home Enable
  id: thermostat_eco_mode_when_noone_home_enable
  mode: single
  trigger:
    - platform: state
      entity_id: binary_sensor.people_home
      to: "off"
      for: "00:15:00"
  condition:
    - condition: state
      entity_id: input_boolean.heating_season_switch
      state: "on"
    - condition: template
      value_template: "{{ not is_state('climate.family_room', 'off') }}"
  action:
    - service: notify.mobile_app_sm_s901b
      data:
        title: "{{ 'ℹ️' }} Системное уведомление"
        message: Термостат переведён в режим экономии
    # Set thermostat mode to «off»
    - service: climate.set_hvac_mode
      entity_id: climate.family_room
      data:
        hvac_mode: "off"
    - service: automation.turn_on
      entity_id: automation.thermostat_eco_mode_when_noone_home_disable
    # Stop all automations that can change thermostat mode
    - service: automation.turn_off
      entity_id:
        - automation.thermostat_eco_mode_by_window_reset
        - automation.thermostat_eco_mode_by_window_disable
        - automation.thermostat_10_minutes_heating_disable

- alias: Thermostat ECO Mode When Noone Home Disable
  id: thermostat_eco_mode_when_noone_home_disable
  mode: single
  trigger:
    - platform: state
      entity_id: binary_sensor.people_home
      to: "on"
  condition:
    - condition: template
      value_template: "{{ is_state('climate.family_room', 'off') }}"
  action:
    - service: notify.mobile_app_sm_s901b
      data:
        title: "{{ 'ℹ️' }} Системное уведомление"
        message: >
          Термостат переведён в нормальный режим.\n
          Температура дома: {{ state_attr('climate.family_room', 'current_temperature') }}°C
    # Set thermostat mode to «heat»
    - service: climate.set_hvac_mode
      entity_id: climate.family_room
      data:
        hvac_mode: "heat"
    - service: automation.turn_off
      entity_id: automation.thermostat_eco_mode_when_noone_home_disable
